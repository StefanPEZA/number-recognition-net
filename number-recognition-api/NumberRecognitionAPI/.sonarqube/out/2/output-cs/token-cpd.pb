ü/
ÑA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\DatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public		 

class		 
DatasetService		 
:		  !
IDatasetService		" 1
{

 
private 
readonly 
IRepository $
<$ %
Dataset% ,
>, -
_repository. 9
;9 :
public 
DatasetService 
( 
IRepository )
<) *
Dataset* 1
>1 2

repository3 =
)= >
{ 	
_repository 
= 

repository $
;$ %
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /
GetAllDatasetAsync0 B
(B C
stringC I
labelJ O
,O P
intQ T
limitU Z
=[ \
$num] _
)_ `
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
d= >
.> ?
Label? D
==E G
labelH M
)M N
;N O
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /"
GetAllTestDatasetAsync0 F
(F G
stringG M
labelN S
,S T
intU X
limitY ^
=_ `
$numa c
)c d
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
(= >
bool> B
)B C
dC D
.D E
IsTestE K
&&L N
dO P
.P Q
LabelQ V
==W Y
labelZ _
)_ `
;` a
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /#
GetAllTrainDatasetAsync0 G
(G H
stringH N
labelO T
,T U
intV Y
limitZ _
=` a
$numb d
)d e
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
!= >
(> ?
bool? C
)C D
dD E
.E F
IsTestF L
&&M O
dP Q
.Q R
LabelR W
==X Z
label[ `
)` a
;a b
} 	
public   
async   
Task   
<   
Dataset   !
>  ! "
GetDatasetAsync  # 2
(  2 3
Guid  3 7
id  8 :
)  : ;
{!! 	
return"" 
await"" 
_repository"" $
.""$ %
GetByIdAsync""% 1
(""1 2
id""2 4
)""4 5
;""5 6
}## 	
public%% 
async%% 
Task%% 
<%% 
bool%% 
>%% 
InsertIntoDataset%%  1
(%%1 2
Dataset%%2 9
dataset%%: A
)%%A B
{&& 	
try'' 
{(( 
await)) 
_repository)) !
.))! "
InsertAsync))" -
())- .
dataset)). 5
)))5 6
;))6 7
return** 
true** 
;** 
}++ 
catch,, 
(,, 
	Exception,, 
ex,, 
),,  
{-- 
Console.. 
... 
	WriteLine.. !
(..! "
ex.." $
)..$ %
;..% &
return// 
false// 
;// 
}00 
}11 	
public33 
async33 
Task33 
<33 
bool33 
>33 
UpdateDataset33  -
(33- .
Dataset33. 5
dataset336 =
)33= >
{44 	
try55 
{66 
await77 
_repository77 !
.77! "
UpdateAsync77" -
(77- .
dataset77. 5
)775 6
;776 7
return88 
true88 
;88 
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
Console<< 
.<< 
	WriteLine<< !
(<<! "
ex<<" $
)<<$ %
;<<% &
return== 
false== 
;== 
}>> 
}?? 	
publicAA 
asyncAA 
TaskAA 
<AA 
boolAA 
>AA "
DeleteFromDatasetAsyncAA  6
(AA6 7
GuidAA7 ;
idAA< >
)AA> ?
{BB 	
tryCC 
{DD 
DatasetEE 
datasetEE 
=EE  !
awaitEE" '
_repositoryEE( 3
.EE3 4
GetByIdAsyncEE4 @
(EE@ A
idEEA C
)EEC D
;EED E
awaitFF 
_repositoryFF !
.FF! "
DeleteAsyncFF" -
(FF- .
datasetFF. 5
)FF5 6
;FF6 7
returnGG 
trueGG 
;GG 
}HH 
catchII 
(II 
	ExceptionII 
exII 
)II  
{JJ 
ConsoleKK 
.KK 
	WriteLineKK !
(KK! "
exKK" $
)KK$ %
;KK% &
returnLL 
falseLL 
;LL 
}MM 
}NN 	
}OO 
}PP Ö
ÖA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\IDatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public 

	interface 
IDatasetService $
{		 
Task

 
<

 
IEnumerable

 
<

 
Dataset

  
>

  !
>

! "
GetAllDatasetAsync

# 5
(

5 6
string

6 <
label

= B
,

B C
int

D G
limit

H M
=

N O
$num

P R
)

R S
;

S T
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! ""
GetAllTestDatasetAsync# 9
(9 :
string: @
labelA F
,F G
intH K
limitL Q
=R S
$numT V
)V W
;W X
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! "#
GetAllTrainDatasetAsync# :
(: ;
string; A
labelB G
,G H
intI L
limitM R
=S T
$numU W
)W X
;X Y
Task 
< 
Dataset 
> 
GetDatasetAsync %
(% &
Guid& *
id+ -
)- .
;. /
Task 
< 
bool 
> 
InsertIntoDataset $
($ %
Dataset% ,
dataset- 4
)4 5
;5 6
Task 
< 
bool 
> 
UpdateDataset  
(  !
Dataset! (
dataset) 0
)0 1
;1 2
Task 
< 
bool 
> "
DeleteFromDatasetAsync )
() *
Guid* .
id/ 1
)1 2
;2 3
} 
} ‚

ÅA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\IImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

	interface 
IImageService "
{ 
Task		 
<		 
byte		 
[		 
]		 
>		 
Resize		 
(		 
byte		  
[		  !
]		! "
source		# )
,		) *
int		* -
width		. 3
,		3 4
int		5 8
height		9 ?
)		? @
;		@ A
Task

 
<

 
byte

 
[

 
]

 
>

 
Crop

 
(

 
byte

 
[

 
]

  
source

! '
)

' (
;

( )
Task 
< 
List 
< 
byte 
[ 
] 
> 
> 
Split  
(  !
byte! %
[% &
]& '
source( .
). /
;/ 0
Task 
< 
float 
> 
Predict 
( 
byte  
[  !
]! "
source# )
)) *
;* +
} 
} áπ
ÇA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageProcessor.cs
	namespace 	
Services
 
. 
ImageService 
{ 
class 	
ImageProcessor
 
{ 
private 
readonly 
Image 
< 
Rgba32 %
>% &
image' ,
;, -
private 
string 
ImageMatrix "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
ImageProcessor 
( 
byte "
[" #
]# $
source% +
)+ ,
{ 	
image 
= 
Image 
. 
Load 
< 
Rgba32 %
>% &
(& '
source' -
)- .
;. /
} 	
private 
Task 
< 
int 
[ 
, 
] 
> #
GetPixelMatrixFromImage 4
(4 5
)5 6
{ 	
int 
[ 
, 
] 
result 
= 
new 
int  #
[# $
image$ )
.) *
Height* 0
,0 1
image2 7
.7 8
Width8 =
]= >
;> ?
StringBuilder 
lines 
=  !
new" %
StringBuilder& 3
(3 4
)4 5
;5 6
for 
( 
int 
i 
= 
$num 
; 
i 
< 
image  %
.% &
Height& ,
;, -
i. /
++/ 1
)1 2
{ 
lines 
. 
Append 
( 
$char  
)  !
;! "
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
image$ )
.) *
Width* /
;/ 0
j1 2
++2 4
)4 5
{   
Rgba32"" 
pixel""  
=""! "
image""# (
[""( )
j"") *
,""* +
i"", -
]""- .
;"". /
if## 
(## 
pixel## 
.## 
R## 
<=##  "
$num### %
||##& (
pixel##) .
.##. /
G##/ 0
<=##1 3
$num##4 6
||##7 9
pixel##: ?
.##? @
B##@ A
<=##B D
$num##E G
)##G H
{$$ 
result%% 
[%% 
i%%  
,%%  !
j%%" #
]%%# $
=%%% &
pixel%%' ,
.%%, -
A%%- .
;%%. /
lines&& 
.&& 
Append&& $
(&&$ %
pixel&&% *
.&&* +
A&&+ ,
.&&, -
ToString&&- 5
(&&5 6
)&&6 7
+&&8 9
$str&&: =
)&&= >
;&&> ?
}'' 
else(( 
{)) 
result** 
[** 
i**  
,**  !
j**" #
]**# $
=**% &
$num**' (
;**( )
lines++ 
.++ 
Append++ $
(++$ %
$str++% *
)++* +
;+++ ,
},, 
}.. 
lines// 
.// 
Append// 
(// 
$str// #
)//# $
;//$ %
}00 
ImageMatrix11 
=11 
lines11 
.11  
ToString11  (
(11( )
)11) *
;11* +
File22 
.22 
WriteAllLines22 
(22 
$str22 )
,22) *
ImageMatrix22+ 6
.226 7
Split227 <
(22< =
$str22= A
)22A B
)22B C
;22C D
return33 
Task33 
.33 

FromResult33 "
(33" #
result33# )
)33) *
;33* +
}44 	
private66 
Image66 
<66 
Rgba3266 
>66 
FillToAspectRatio66 /
(66/ 0
int660 3
width664 9
,669 :
int66; >
height66? E
)66E F
{77 	
double88 
ratioH88 
=88 
Math88  
.88  !
Max88! $
(88$ %
(88% &
double88& ,
)88, -
width88- 2
/883 4
image885 :
.88: ;
Width88; @
,88@ A
(88B C
double88C I
)88I J
image88J O
.88O P
Width88P U
/88V W
width88X ]
)88] ^
;88^ _
double99 
ratioW99 
=99 
Math99  
.99  !
Max99! $
(99$ %
(99% &
double99& ,
)99, -
height99- 3
/994 5
image996 ;
.99; <
Height99< B
,99B C
(99D E
double99E K
)99K L
image99L Q
.99Q R
Height99R X
/99Y Z
height99[ a
)99a b
;99b c
Size:: 
newSize:: 
=:: 
new:: 
Size:: #
(::# $
(::$ %
int::% (
)::( )
(::) *
width::* /
*::0 1
ratioW::2 8
)::8 9
+::: ;
(::< =
image::= B
.::B C
Width::C H
/::I J
$num::K L
)::L M
,::M N
(::O P
int::P S
)::S T
(::T U
height::U [
*::\ ]
ratioH::^ d
)::d e
+::f g
(::h i
image::i n
.::n o
Height::o u
/::v w
$num::x y
)::y z
)::z {
;::{ |
Image;; 
<;; 
Rgba32;; 
>;; 
newImage;; "
=;;# $
new;;% (
Image;;) .
<;;. /
Rgba32;;/ 5
>;;5 6
(;;6 7
newSize;;7 >
.;;> ?
Width;;? D
,;;D E
newSize;;F M
.;;M N
Height;;N T
);;T U
;;;U V
newImage== 
.== 
Mutate== 
(== 
ic== 
=>== !
{>> 
ic?? 
.?? 
Fill?? 
(?? 
Color?? 
.?? 
White?? #
,??# $
new??% (

RectangleF??) 3
(??3 4
$num??4 5
,??5 6
$num??7 8
,??8 9
newSize??: A
.??A B
Width??B G
,??G H
newSize??I P
.??P Q
Height??Q W
)??W X
)??X Y
;??Y Z
ic@@ 
.@@ 
	DrawImage@@ 
(@@ 
image@@ "
,@@" #
new@@$ '
Point@@( -
(@@- .
(@@. /
newSize@@/ 6
.@@6 7
Width@@7 <
/@@= >
$num@@? @
)@@@ A
-@@B C
(@@D E
image@@E J
.@@J K
Width@@K P
/@@Q R
$num@@S T
)@@T U
,@@U V
(@@W X
newSize@@X _
.@@_ `
Height@@` f
/@@g h
$num@@i j
)@@j k
-@@l m
(@@n o
image@@o t
.@@t u
Height@@u {
/@@| }
$num@@~ 
)	@@ Ä
)
@@Ä Å
,
@@Å Ç
$num
@@É Ñ
)
@@Ñ Ö
;
@@Ö Ü
}AA 
)AA 
;AA 
returnCC 
newImageCC 
;CC 
}DD 	
publicFF 
asyncFF 
TaskFF 
<FF 
byteFF 
[FF 
]FF  
>FF  !
ResizeFF" (
(FF( )
intFF) ,
widthFF- 2
,FF2 3
intFF4 7
heightFF8 >
)FF> ?
{GG 	
ImageHH 
<HH 
Rgba32HH 
>HH 
newImageHH "
=HH# $
awaitHH% *
TaskHH+ /
.HH/ 0
RunHH0 3
(HH3 4
(HH4 5
)HH5 6
=>HH7 9
FillToAspectRatioHH: K
(HHK L
widthHHL Q
,HHQ R
heightHHS Y
)HHY Z
)HHZ [
;HH[ \
newImageII 
.II 
MutateII 
(II 
icII 
=>II !
{JJ 
icKK 
.KK 
ResizeKK 
(KK 
widthKK 
,KK  
heightKK! '
)KK' (
;KK( )
}LL 
)LL 
;LL 
varNN 
streamNN 
=NN 
newNN 
MemoryStreamNN )
(NN) *
)NN* +
;NN+ ,
newImageOO 
.OO 
	SaveAsPngOO 
(OO 
streamOO %
)OO% &
;OO& '
newImageQQ 
.QQ 
DisposeQQ 
(QQ 
)QQ 
;QQ 
returnTT 
streamTT 
.TT 
ToArrayTT !
(TT! "
)TT" #
;TT# $
}UU 	
publicXX 
asyncXX 
TaskXX 
<XX 
byteXX 
[XX 
]XX  
>XX  !
CropXX" &
(XX& '
)XX' (
{YY 	
intZZ 
[ZZ 
,ZZ 
]ZZ 
imageMatrixZZ 
=ZZ  
awaitZZ! &
TaskZZ' +
.ZZ+ ,
RunZZ, /
(ZZ/ 0#
GetPixelMatrixFromImageZZ0 G
)ZZG H
;ZZH I
int\\ 
minW\\ 
=\\ 
image\\ 
.\\ 
Width\\ "
;\\" #
int]] 
maxW]] 
=]] 
$num]] 
;]] 
int__ 
minH__ 
=__ 
image__ 
.__ 
Height__ #
;__# $
int`` 
maxH`` 
=`` 
$num`` 
;`` 
forbb 
(bb 
intbb 
ibb 
=bb 
$numbb 
;bb 
ibb 
<bb 
imagebb  %
.bb% &
Heightbb& ,
;bb, -
ibb. /
++bb/ 1
)bb1 2
{cc 
fordd 
(dd 
intdd 
jdd 
=dd 
$numdd 
;dd 
jdd  !
<dd" #
imagedd$ )
.dd) *
Widthdd* /
;dd/ 0
jdd1 2
++dd2 4
)dd4 5
{ee 
ifff 
(ff 
imageMatrixff #
[ff# $
iff$ %
,ff% &
jff' (
]ff( )
==ff* ,
$numff- 0
&&ff1 3
jff4 5
>ff6 7
maxWff8 <
)ff< =
maxWgg 
=gg 
jgg  
;gg  !
ifhh 
(hh 
imageMatrixhh #
[hh# $
ihh$ %
,hh% &
jhh' (
]hh( )
==hh* ,
$numhh- 0
&&hh1 3
jhh4 5
<hh6 7
minWhh8 <
)hh< =
minWii 
=ii 
jii  
;ii  !
ifjj 
(jj 
imageMatrixjj #
[jj# $
ijj$ %
,jj% &
jjj' (
]jj( )
==jj* ,
$numjj- 0
&&jj1 3
ijj4 5
>jj6 7
maxHjj8 <
)jj< =
maxHkk 
=kk 
ikk  
;kk  !
ifll 
(ll 
imageMatrixll #
[ll# $
ill$ %
,ll% &
jll' (
]ll( )
==ll* ,
$numll- 0
&&ll1 3
ill4 5
<ll6 7
minHll8 <
)ll< =
minHmm 
=mm 
imm  
;mm  !
}nn 
}oo 
intqq 
widthBlackSpacesqq  
=qq! "
maxWqq# '
-qq( )
minWqq* .
+qq/ 0
$numqq1 2
;qq2 3
intrr 
heightBlackSpacesrr !
=rr" #
maxHrr$ (
-rr) *
minHrr+ /
+rr0 1
$numrr2 3
;rr3 4
Imagett 
<tt 
Rgba32tt 
>tt 
resulttt  
=tt! "
newtt# &
Imagett' ,
<tt, -
Rgba32tt- 3
>tt3 4
(tt4 5
widthBlackSpacestt5 E
,ttE F
heightBlackSpacesttG X
)ttX Y
;ttY Z
intvv 
[vv 
,vv 
]vv 
resultMatrixvv 
=vv  !
newvv" %
intvv& )
[vv) *
heightBlackSpacesvv* ;
,vv; <
widthBlackSpacesvv= M
]vvM N
;vvN O
forxx 
(xx 
intxx 
ixx 
=xx 
$numxx 
;xx 
ixx 
<xx 
heightBlackSpacesxx  1
;xx1 2
ixx3 4
++xx4 6
)xx6 7
{yy 
forzz 
(zz 
intzz 
jzz 
=zz 
$numzz 
;zz 
jzz  !
<zz" #
widthBlackSpaceszz$ 4
;zz4 5
jzz6 7
++zz7 9
)zz9 :
{{{ 
resultMatrix||  
[||  !
i||! "
,||" #
j||$ %
]||% &
=||' (
imageMatrix||) 4
[||4 5
minH||5 9
+||: ;
i||< =
,||= >
minW||? C
+||D E
j||F G
]||G H
;||H I
if}} 
(}} 
resultMatrix}} $
[}}$ %
i}}% &
,}}& '
j}}( )
]}}) *
==}}+ -
$num}}. /
)}}/ 0
{~~ 
result 
[ 
j  
,  !
i! "
]" #
=$ %
Color& +
.+ ,
FromRgb, 3
(3 4
$num4 7
,7 8
$num9 <
,< =
$num> A
)A B
;B C
}
ÄÄ 
else
ÅÅ 
{
ÇÇ 
result
ÉÉ 
[
ÉÉ 
j
ÉÉ  
,
ÉÉ  !
i
ÉÉ" #
]
ÉÉ# $
=
ÉÉ% &
Color
ÉÉ' ,
.
ÉÉ, -
FromRgba
ÉÉ- 5
(
ÉÉ5 6
$num
ÉÉ6 7
,
ÉÉ7 8
$num
ÉÉ9 :
,
ÉÉ: ;
$num
ÉÉ< =
,
ÉÉ= >
Convert
ÉÉ? F
.
ÉÉF G
ToByte
ÉÉG M
(
ÉÉM N
resultMatrix
ÉÉN Z
[
ÉÉZ [
i
ÉÉ[ \
,
ÉÉ\ ]
j
ÉÉ^ _
]
ÉÉ_ `
)
ÉÉ` a
)
ÉÉa b
;
ÉÉb c
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
var
ää 
stream
ää 
=
ää 
new
ää 
MemoryStream
ää )
(
ää) *
)
ää* +
;
ää+ ,
result
ãã 
.
ãã 
	SaveAsPng
ãã 
(
ãã 
stream
ãã #
)
ãã# $
;
ãã$ %
result
çç 
.
çç 
Dispose
çç 
(
çç 
)
çç 
;
çç 
return
éé 
stream
éé 
.
éé 
ToArray
éé !
(
éé! "
)
éé" #
;
éé# $
}
èè 	
private
ëë 
Image
ëë 
<
ëë 
Rgba32
ëë 
>
ëë 
ImageCreator
ëë *
(
ëë* +
int
ëë+ .

splitIndex
ëë/ 9
,
ëë9 :
int
ëë; >
	lastSplit
ëë? H
,
ëëH I
int
ëëJ M
[
ëëM N
,
ëëN O
]
ëëO P
imageMatrix
ëëQ \
)
ëë\ ]
{
íí 	
Image
ìì 
<
ìì 
Rgba32
ìì 
>
ìì 
temp
ìì 
=
ìì  
new
ìì! $
Image
ìì% *
<
ìì* +
Rgba32
ìì+ 1
>
ìì1 2
(
ìì2 3

splitIndex
ìì3 =
-
ìì> ?
	lastSplit
ìì@ I
,
ììI J
image
ììK P
.
ììP Q
Height
ììQ W
)
ììW X
;
ììX Y
for
îî 
(
îî 
int
îî 
j
îî 
=
îî 
$num
îî 
;
îî 
j
îî 
<
îî 
image
îî  %
.
îî% &
Height
îî& ,
;
îî, -
j
îî. /
++
îî/ 1
)
îî1 2
for
ïï 
(
ïï 
int
ïï 
i
ïï 
=
ïï 
	lastSplit
ïï &
;
ïï& '
i
ïï( )
<
ïï* +

splitIndex
ïï, 6
;
ïï6 7
i
ïï8 9
++
ïï9 ;
)
ïï; <
{
ññ 
if
óó 
(
óó 
imageMatrix
óó #
[
óó# $
j
óó$ %
,
óó% &
i
óó' (
]
óó( )
==
óó* ,
$num
óó- .
)
óó. /
{
òò 
temp
ôô 
[
ôô 
i
ôô 
-
ôô  
	lastSplit
ôô! *
,
ôô* +
j
ôô, -
]
ôô- .
=
ôô/ 0
Color
ôô1 6
.
ôô6 7
FromRgb
ôô7 >
(
ôô> ?
$num
ôô? B
,
ôôB C
$num
ôôD G
,
ôôG H
$num
ôôI L
)
ôôL M
;
ôôM N
}
öö 
else
õõ 
{
úú 
temp
ùù 
[
ùù 
i
ùù 
-
ùù  
	lastSplit
ùù! *
,
ùù* +
j
ùù, -
]
ùù- .
=
ùù/ 0
Color
ùù1 6
.
ùù6 7
FromRgba
ùù7 ?
(
ùù? @
$num
ùù@ A
,
ùùA B
$num
ùùC D
,
ùùD E
$num
ùùF G
,
ùùG H
Convert
ùùI P
.
ùùP Q
ToByte
ùùQ W
(
ùùW X
imageMatrix
ùùX c
[
ùùc d
j
ùùd e
,
ùùe f
i
ùùg h
]
ùùh i
)
ùùi j
)
ùùj k
;
ùùk l
}
ûû 
}
üü 
return
†† 
temp
†† 
;
†† 
}
°° 	
public
££ 
async
££ 
Task
££ 
<
££ 
List
££ 
<
££ 
byte
££ #
[
££# $
]
££$ %
>
££% &
>
££& '
Split
££( -
(
££- .
)
££. /
{
§§ 	
List
•• 
<
•• 
byte
•• 
[
•• 
]
•• 
>
•• 
result
•• 
=
••  !
new
••" %
List
••& *
<
••* +
byte
••+ /
[
••/ 0
]
••0 1
>
••1 2
(
••2 3
)
••3 4
;
••4 5
int
¶¶ 
[
¶¶ 
,
¶¶ 
]
¶¶ 
imageMatrix
¶¶ 
=
¶¶  
await
¶¶! &
Task
¶¶' +
.
¶¶+ ,
Run
¶¶, /
(
¶¶/ 0%
GetPixelMatrixFromImage
¶¶0 G
)
¶¶G H
;
¶¶H I
int
ßß 
lastNotBank
ßß 
=
ßß 
-
ßß 
$num
ßß  
;
ßß  !
List
®® 
<
®® 
int
®® 
>
®® 
	splitList
®® 
=
®®  !
new
®®" %
List
®®& *
<
®®* +
int
®®+ .
>
®®. /
(
®®/ 0
)
®®0 1
;
®®1 2
for
™™ 
(
™™ 
int
™™ 
j
™™ 
=
™™ 
$num
™™ 
;
™™ 
j
™™ 
<
™™ 
image
™™  %
.
™™% &
Width
™™& +
;
™™+ ,
j
™™- .
++
™™. 0
)
™™0 1
{
´´ 
bool
¨¨ 
isLineWhite
¨¨  
=
¨¨! "
true
¨¨# '
;
¨¨' (
for
≠≠ 
(
≠≠ 
int
≠≠ 
i
≠≠ 
=
≠≠ 
$num
≠≠ 
;
≠≠ 
i
≠≠  !
<
≠≠" #
image
≠≠$ )
.
≠≠) *
Height
≠≠* 0
;
≠≠0 1
i
≠≠2 3
++
≠≠3 5
)
≠≠5 6
if
ÆÆ 
(
ÆÆ 
imageMatrix
ÆÆ #
[
ÆÆ# $
i
ÆÆ$ %
,
ÆÆ% &
j
ÆÆ' (
]
ÆÆ( )
==
ÆÆ* ,
$num
ÆÆ- 0
)
ÆÆ0 1
{
ØØ 
isLineWhite
∞∞ #
=
∞∞$ %
false
∞∞& +
;
∞∞+ ,
lastNotBank
±± #
=
±±$ %
$num
±±& '
;
±±' (
}
≤≤ 
if
≥≥ 
(
≥≥ 
isLineWhite
≥≥ 
&&
≥≥  "
lastNotBank
≥≥# .
!=
≥≥/ 1
-
≥≥2 3
$num
≥≥3 4
)
≥≥4 5
{
¥¥ 
	splitList
µµ 
.
µµ 
Add
µµ !
(
µµ! "
j
µµ" #
)
µµ# $
;
µµ$ %
lastNotBank
∂∂ 
=
∂∂  !
-
∂∂" #
$num
∂∂# $
;
∂∂$ %
}
∑∑ 
}
∏∏ 
int
∫∫ 
	lastSplit
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
foreach
ºº 
(
ºº 
int
ºº 

splitIndex
ºº #
in
ºº$ &
	splitList
ºº' 0
)
ºº0 1
{
ΩΩ 
Image
ææ 
<
ææ 
Rgba32
ææ 
>
ææ 
temp
ææ "
=
ææ# $
ImageCreator
ææ% 1
(
ææ1 2

splitIndex
ææ2 <
,
ææ< =
	lastSplit
ææ> G
,
ææG H
imageMatrix
ææI T
)
ææT U
;
ææU V
	lastSplit
øø 
=
øø 

splitIndex
øø &
;
øø& '
var
¡¡ 
stream
¡¡ 
=
¡¡ 
new
¡¡  
MemoryStream
¡¡! -
(
¡¡- .
)
¡¡. /
;
¡¡/ 0
temp
¬¬ 
.
¬¬ 
	SaveAsPng
¬¬ 
(
¬¬ 
stream
¬¬ %
)
¬¬% &
;
¬¬& '
temp
√√ 
.
√√ 
Dispose
√√ 
(
√√ 
)
√√ 
;
√√ 
result
ƒƒ 
.
ƒƒ 
Add
ƒƒ 
(
ƒƒ 
stream
ƒƒ !
.
ƒƒ! "
ToArray
ƒƒ" )
(
ƒƒ) *
)
ƒƒ* +
)
ƒƒ+ ,
;
ƒƒ, -
}
∆∆ 
return
»» 
result
»» 
;
»» 
}
…… 	
public
ÀÀ 
async
ÀÀ 
Task
ÀÀ 
<
ÀÀ 
IEnumerable
ÀÀ %
<
ÀÀ% &
float
ÀÀ& +
>
ÀÀ+ ,
>
ÀÀ, - 
GetFlattenedMatrix
ÀÀ. @
(
ÀÀ@ A
)
ÀÀA B
{
ÃÃ 	
List
ÕÕ 
<
ÕÕ 
float
ÕÕ 
>
ÕÕ 
result
ÕÕ 
=
ÕÕ  
new
ÕÕ! $
List
ÕÕ% )
<
ÕÕ) *
float
ÕÕ* /
>
ÕÕ/ 0
(
ÕÕ0 1
)
ÕÕ1 2
;
ÕÕ2 3
int
ŒŒ 
[
ŒŒ 
,
ŒŒ 
]
ŒŒ 
pixelMatrix
ŒŒ 
=
ŒŒ  
await
ŒŒ! &
Task
ŒŒ' +
.
ŒŒ+ ,
Run
ŒŒ, /
(
ŒŒ/ 0%
GetPixelMatrixFromImage
ŒŒ0 G
)
ŒŒG H
;
ŒŒH I
foreach
œœ 
(
œœ 
int
œœ 
x
œœ 
in
œœ 
pixelMatrix
œœ (
)
œœ( )
{
–– 
result
—— 
.
—— 
Add
—— 
(
—— 
x
—— 
)
—— 
;
—— 
}
““ 
return
”” 
result
”” 
;
”” 
}
‘‘ 	
public
◊◊ 
override
◊◊ 
string
◊◊ 
ToString
◊◊ '
(
◊◊' (
)
◊◊( )
{
ÿÿ 	
return
ŸŸ 
ImageMatrix
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
}
€€ 
}‹‹ Ö
ÄA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

class 
ImageService 
: 
IImageService  -
{		 
public

 
async

 
Task

 
<

 
byte

 
[

 
]

  
>

  !
Resize

" (
(

( )
byte

) -
[

- .
]

. /
source

0 6
,

6 7
int

7 :
width

; @
,

@ A
int

B E
height

F L
)

L M
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Resize4 :
(: ;
width; @
,@ A
heightA G
)G H
;H I
} 	
public 
async 
Task 
< 
byte 
[ 
]  
>  !
Crop" &
(& '
byte' +
[+ ,
], -
source. 4
)4 5
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Crop4 8
(8 9
)9 :
;: ;
} 	
public 
async 
Task 
< 
List 
< 
byte #
[# $
]$ %
>% &
>& '
Split( -
(- .
byte. 2
[2 3
]3 4
source5 ;
); <
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Split4 9
(9 :
): ;
;; <
} 	
public 
async 
Task 
< 
float 
>  
Predict  '
(' (
byte( ,
[, -
]- .
source/ 5
)5 6
{ 	
return 
new 
NumberRecognition (
(( )
)) *
.* +
Predict+ 2
(2 3
await3 8
new9 <
ImageProcessor= K
(K L
sourceL R
)R S
.S T
GetFlattenedMatrixT f
(f g
)g h
)h i
;i j
} 	
} 
} Ã_
ÖA:\!facultate\anul3\IMR\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\NumberRecognition.cs
	namespace 	
NumberRecognitionML
 
{ 
public 

class 
Digit 
{ 
public   
float   
Number   
;   
[!! 	

VectorType!!	 
(!! 
$num!! 
)!! 
]!! 
public!!  
float!!! &
[!!& '
]!!' (
PixelValues!!) 4
;!!4 5
}"" 
public'' 

class'' 
DigitPrediction''  
{(( 
[)) 	

ColumnName))	 
()) 
$str)) 
))) 
])) 
public** 
float** 
[** 
]** 
Score** 
;** 
public++ 
float++ 
PredictedNumber++ $
;++$ %
},, 
public.. 

class.. 
NumberRecognition.. "
{// 
private00 
static00 
bool00 

HasHeaders00 &
=00' (
true00) -
;00- .
public11 
void11 
Train11 
(11 
string11  
dataPath11! )
,11) *
string11+ 1
	modelPath112 ;
,11; <
string11< B
testPath11C K
)11K L
{22 	
var44 
context44 
=44 
new44 
	MLContext44 '
(44' (
)44( )
;44) *
Trace77 
.77 
	WriteLine77 
(77 
$str77 .
)77. /
;77/ 0
var88 
dataView88 
=88 
context88 "
.88" #
Data88# '
.88' (
LoadFromTextFile88( 8
(888 9
path99 
:99 
dataPath99 
,99 
columns:: 
::: 
new:: 
[:: 
]:: 
{;; 
new<< 

TextLoader<< "
.<<" #
Column<<# )
(<<) *
$str<<* 2
,<<2 3
DataKind<<4 <
.<<< =
Single<<= C
,<<C D
$num<<E F
)<<F G
,<<G H
new== 

TextLoader== "
.==" #
Column==# )
(==) *
nameof==* 0
(==0 1
Digit==1 6
.==6 7
PixelValues==7 B
)==B C
,==C D
DataKind==E M
.==M N
Single==N T
,==T U
$num==V W
,==W X
$num==Y \
)==\ ]
}>> 
,>> 
	hasHeader?? 
:?? 

HasHeaders?? %
,??% &
separatorChar@@ 
:@@ 
$char@@ "
)@@" #
;@@# $
varAA 
testSetAA 
=AA 
contextAA !
.AA! "
DataAA" &
.AA& '
LoadFromTextFileAA' 7
(AA7 8
pathBB 
:BB 
testPathBB 
,BB 
columnsCC 
:CC 
newCC 
[CC 
]CC 
{DD 
newEE 

TextLoaderEE "
.EE" #
ColumnEE# )
(EE) *
$strEE* 2
,EE2 3
DataKindEE4 <
.EE< =
SingleEE= C
,EEC D
$numEEE F
)EEF G
,EEG H
newFF 

TextLoaderFF "
.FF" #
ColumnFF# )
(FF) *
nameofFF* 0
(FF0 1
DigitFF1 6
.FF6 7
PixelValuesFF7 B
)FFB C
,FFC D
DataKindFFE M
.FFM N
SingleFFN T
,FFT U
$numFFV W
,FFW X
$numFFY \
)FF\ ]
}GG 
,GG 
	hasHeaderHH 
:HH 

HasHeadersHH %
,HH% &
separatorCharII 
:II 
$charII "
)II" #
;II# $
varOO 
pipelineOO 
=OO 
contextOO "
.OO" #

TransformsOO# -
.OO- .
ConcatenateOO. 9
(OO9 :
$strOO: D
,OOD E
nameofQQ 
(QQ 
DigitQQ 
.QQ 
PixelValuesQQ (
)QQ( )
)QQ) *
.SS 
AppendSS 
(SS 
contextSS 
.SS  

TransformsSS  *
.SS* +

ConversionSS+ 5
.SS5 6
MapValueToKeySS6 C
(SSC D
inputColumnNameSSD S
:SSS T
$strSSU ]
,SS] ^
outputColumnNameSS_ o
:SSo p
$strSSq x
)SSx y
)SSy z
.VV !
AppendCacheCheckpointVV &
(VV& '
contextVV' .
)VV. /
.YY 
AppendYY 
(YY 
contextYY 
.YY  $
MulticlassClassificationYY  8
.YY8 9
TrainersYY9 A
.YYA B
SdcaMaximumEntropyYYB T
(YYT U
labelColumnNameZZ #
:ZZ# $
$strZZ% ,
,ZZ, -
featureColumnName[[ %
:[[% &
$str[[' 1
)[[1 2
)[[2 3
.]] 
Append]] 
(]] 
context]] 
.]]  

Transforms]]  *
.]]* +

Conversion]]+ 5
.]]5 6
MapKeyToValue]]6 C
(]]C D
$str]]D U
,]]U V
$str]]W g
)]]g h
)]]h i
;]]i j
Trace`` 
.`` 
	WriteLine`` 
(`` 
$str`` 0
)``0 1
;``1 2
varaa 
modelaa 
=aa 
pipelineaa  
.aa  !
Fitaa! $
(aa$ %
dataViewaa% -
)aa- .
;aa. /
Traceee 
.ee 
	WriteLineee 
(ee 
$stree 2
)ee2 3
;ee3 4
varff 
predictionsff 
=ff 
modelff #
.ff# $
	Transformff$ -
(ff- .
testSetff. 5
)ff5 6
;ff6 7
varii 
metricsii 
=ii 
contextii !
.ii! "$
MulticlassClassificationii" :
.ii: ;
Evaluateii; C
(iiC D
datajj 
:jj 
predictionsjj !
)mm 
;mm 
Tracepp 
.pp 
	WriteLinepp 
(pp 
$"pp 
$strpp 0
"pp0 1
)pp1 2
;pp2 3
Traceqq 
.qq 
	WriteLineqq 
(qq 
$"qq 
$strqq 4
{qq4 5
metricsqq5 <
.qq< =
MicroAccuracyqq= J
:qqJ K
$strqqK P
}qqP Q
"qqQ R
)qqR S
;qqS T
Tracerr 
.rr 
	WriteLinerr 
(rr 
$"rr 
$strrr 4
{rr4 5
metricsrr5 <
.rr< =
MacroAccuracyrr= J
:rrJ K
$strrrK P
}rrP Q
"rrQ R
)rrR S
;rrS T
Tracess 
.ss 
	WriteLiness 
(ss 
$"ss 
$strss 4
{ss4 5
metricsss5 <
.ss< =
LogLossss= D
:ssD E
$strssE J
}ssJ K
"ssK L
)ssL M
;ssM N
Tracett 
.tt 
	WriteLinett 
(tt 
$"tt 
$strtt 4
{tt4 5
metricstt5 <
.tt< =
LogLossReductiontt= M
:ttM N
$strttN S
}ttS T
"ttT U
)ttU V
;ttV W
contextvv 
.vv 
Modelvv 
.vv 
Savevv 
(vv 
modelvv $
,vv$ %
dataViewvv& .
.vv. /
Schemavv/ 5
,vv5 6
	modelPathvv7 @
)vv@ A
;vvA B
Traceww 
.ww 
	WriteLineww 
(ww 
$"ww 
$strww $
{ww$ %
	modelPathww% .
}ww. /
$strww/ 6
"ww6 7
)ww7 8
;ww8 9
_predictionEngineyy 
=yy 
contextyy  '
.yy' (
Modelyy( -
.yy- ."
CreatePredictionEngineyy. D
<yyD E
DigityyE J
,yyJ K
DigitPredictionyyL [
>yy[ \
(yy\ ]
modelyy] b
)yyb c
;yyc d
}zz 	
private|| 
PredictionEngine||  
<||  !
Digit||! &
,||& '
DigitPrediction||( 7
>||7 8
_predictionEngine||9 J
;||J K
public~~ 
void~~ 
	LoadModel~~ 
(~~ 
string~~ $
	modelPath~~% .
)~~. /
{ 	
var
ÄÄ 
context
ÄÄ 
=
ÄÄ 
new
ÄÄ 
	MLContext
ÄÄ '
(
ÄÄ' (
)
ÄÄ( )
;
ÄÄ) *
DataViewSchema
ÅÅ 
schema
ÅÅ !
;
ÅÅ! "
var
ÇÇ 
model
ÇÇ 
=
ÇÇ 
context
ÇÇ 
.
ÇÇ  
Model
ÇÇ  %
.
ÇÇ% &
Load
ÇÇ& *
(
ÇÇ* +
	modelPath
ÇÇ+ 4
,
ÇÇ4 5
out
ÇÇ6 9
schema
ÇÇ: @
)
ÇÇ@ A
;
ÇÇA B
_predictionEngine
ÉÉ 
=
ÉÉ 
context
ÉÉ  '
.
ÉÉ' (
Model
ÉÉ( -
.
ÉÉ- .$
CreatePredictionEngine
ÉÉ. D
<
ÉÉD E
Digit
ÉÉE J
,
ÉÉJ K
DigitPrediction
ÉÉL [
>
ÉÉ[ \
(
ÉÉ\ ]
model
ÉÉ] b
)
ÉÉb c
;
ÉÉc d
Trace
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$"
ÑÑ 
$str
ÑÑ $
{
ÑÑ$ %
	modelPath
ÑÑ% .
}
ÑÑ. /
$str
ÑÑ/ 7
"
ÑÑ7 8
)
ÑÑ8 9
;
ÑÑ9 :
}
ÖÖ 	
public
áá 
DigitPrediction
áá 
PredictDigit
áá +
(
áá+ ,
Digit
áá, 1
digit
áá2 7
)
áá7 8
{
àà 	
try
ââ 
{
ää 
return
ãã 
_predictionEngine
ãã (
.
ãã( )
Predict
ãã) 0
(
ãã0 1
digit
ãã1 6
)
ãã6 7
;
ãã7 8
}
åå 
catch
çç 
(
çç 
	Exception
çç 
exp
çç  
)
çç  !
{
éé 
Trace
èè 
.
èè 
	WriteLine
èè 
(
èè  
$str
èè  B
)
èèB C
;
èèC D
return
êê 
null
êê 
;
êê 
}
ëë 
}
íí 	
public
îî 
float
îî 
Predict
îî 
(
îî 
IEnumerable
îî (
<
îî( )
float
îî) .
>
îî. /

attributes
îî0 :
)
îî: ;
{
ïï 	
Digit
ññ 
digit
ññ 
=
ññ 
new
ññ 
Digit
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &
digit
óó 
.
óó 
PixelValues
óó 
=
óó 

attributes
óó  *
.
óó* +
ToArray
óó+ 2
(
óó2 3
)
óó3 4
;
óó4 5
for
òò 
(
òò 
int
òò 
i
òò 
=
òò 
$num
òò 
;
òò 
i
òò 
<
òò 
$num
òò  #
;
òò# $
i
òò% &
++
òò& (
)
òò( )
{
ôô 
if
öö 
(
öö 
digit
öö 
.
öö 
PixelValues
öö %
[
öö% &
i
öö& '
]
öö' (
>
öö) *
$num
öö+ -
)
öö- .
digit
õõ 
.
õõ 
PixelValues
õõ %
[
õõ% &
i
õõ& '
]
õõ' (
=
õõ) *
$num
õõ+ -
;
õõ- .
}
úú 
	LoadModel
ûû 
(
ûû 
$str
ûû >
)
ûû> ?
;
ûû? @
var
üü 
predictionResult
üü  
=
üü! "
PredictDigit
üü# /
(
üü/ 0
digit
üü0 5
)
üü5 6
;
üü6 7
return
†† 
predictionResult
†† #
.
††# $
PredictedNumber
††$ 3
;
††3 4
}
°° 	
}
¢¢ 
}££ 