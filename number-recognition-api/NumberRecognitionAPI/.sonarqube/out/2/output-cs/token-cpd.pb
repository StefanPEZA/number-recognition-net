ê/
vD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\DatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public		 

class		 
DatasetService		 
:		  !
IDatasetService		" 1
{

 
private 
readonly 
IRepository $
<$ %
Dataset% ,
>, -
_repository. 9
;9 :
public 
DatasetService 
( 
IRepository )
<) *
Dataset* 1
>1 2

repository3 =
)= >
{ 	
_repository 
= 

repository $
;$ %
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /
GetAllDatasetAsync0 B
(B C
stringC I
labelJ O
,O P
intQ T
limitU Z
=[ \
$num] _
)_ `
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
d= >
.> ?
Label? D
==E G
labelH M
)M N
;N O
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /"
GetAllTestDatasetAsync0 F
(F G
stringG M
labelN S
,S T
intU X
limitY ^
=_ `
$numa c
)c d
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
(= >
bool> B
)B C
dC D
.D E
IsTestE K
&&L N
dO P
.P Q
LabelQ V
==W Y
labelZ _
)_ `
;` a
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /#
GetAllTrainDatasetAsync0 G
(G H
stringH N
labelO T
,T U
intV Y
limitZ _
=` a
$numb d
)d e
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
!= >
(> ?
bool? C
)C D
dD E
.E F
IsTestF L
&&M O
dP Q
.Q R
LabelR W
==X Z
label[ `
)` a
;a b
} 	
public   
async   
Task   
<   
Dataset   !
>  ! "
GetDatasetAsync  # 2
(  2 3
Guid  3 7
id  8 :
)  : ;
{!! 	
return"" 
await"" 
_repository"" $
.""$ %
GetByIdAsync""% 1
(""1 2
id""2 4
)""4 5
;""5 6
}## 	
public%% 
async%% 
Task%% 
<%% 
bool%% 
>%% 
InsertIntoDataset%%  1
(%%1 2
Dataset%%2 9
dataset%%: A
)%%A B
{&& 	
try'' 
{(( 
await)) 
_repository)) !
.))! "
InsertAsync))" -
())- .
dataset)). 5
)))5 6
;))6 7
return** 
true** 
;** 
}++ 
catch,, 
(,, 
	Exception,, 
ex,, 
),,  
{-- 
Console.. 
... 
	WriteLine.. !
(..! "
ex.." $
)..$ %
;..% &
return// 
false// 
;// 
}00 
}11 	
public33 
async33 
Task33 
<33 
bool33 
>33 
UpdateDataset33  -
(33- .
Dataset33. 5
dataset336 =
)33= >
{44 	
try55 
{66 
await77 
_repository77 !
.77! "
UpdateAsync77" -
(77- .
dataset77. 5
)775 6
;776 7
return88 
true88 
;88 
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
Console<< 
.<< 
	WriteLine<< !
(<<! "
ex<<" $
)<<$ %
;<<% &
return== 
false== 
;== 
}>> 
}?? 	
publicAA 
asyncAA 
TaskAA 
<AA 
boolAA 
>AA "
DeleteFromDatasetAsyncAA  6
(AA6 7
GuidAA7 ;
idAA< >
)AA> ?
{BB 	
tryCC 
{DD 
DatasetEE 
datasetEE 
=EE  !
awaitEE" '
_repositoryEE( 3
.EE3 4
GetByIdAsyncEE4 @
(EE@ A
idEEA C
)EEC D
;EED E
awaitFF 
_repositoryFF !
.FF! "
DeleteAsyncFF" -
(FF- .
datasetFF. 5
)FF5 6
;FF6 7
returnGG 
trueGG 
;GG 
}HH 
catchII 
(II 
	ExceptionII 
exII 
)II  
{JJ 
ConsoleKK 
.KK 
	WriteLineKK !
(KK! "
exKK" $
)KK$ %
;KK% &
returnLL 
falseLL 
;LL 
}MM 
}NN 	
}OO 
}PP ˆ
wD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\IDatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public 

	interface 
IDatasetService $
{		 
Task

 
<

 
IEnumerable

 
<

 
Dataset

  
>

  !
>

! "
GetAllDatasetAsync

# 5
(

5 6
string

6 <
label

= B
,

B C
int

D G
limit

H M
=

N O
$num

P R
)

R S
;

S T
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! ""
GetAllTestDatasetAsync# 9
(9 :
string: @
labelA F
,F G
intH K
limitL Q
=R S
$numT V
)V W
;W X
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! "#
GetAllTrainDatasetAsync# :
(: ;
string; A
labelB G
,G H
intI L
limitM R
=S T
$numU W
)W X
;X Y
Task 
< 
Dataset 
> 
GetDatasetAsync %
(% &
Guid& *
id+ -
)- .
;. /
Task 
< 
bool 
> 
InsertIntoDataset $
($ %
Dataset% ,
dataset- 4
)4 5
;5 6
Task 
< 
bool 
> 
UpdateDataset  
(  !
Dataset! (
dataset) 0
)0 1
;1 2
Task 
< 
bool 
> "
DeleteFromDatasetAsync )
() *
Guid* .
id/ 1
)1 2
;2 3
} 
} ”

sD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\IImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

	interface 
IImageService "
{ 
Task		 
<		 
byte		 
[		 
]		 
>		 
Resize		 
(		 
byte		  
[		  !
]		! "
source		# )
,		) *
int		* -
width		. 3
,		3 4
int		5 8
height		9 ?
)		? @
;		@ A
Task

 
<

 
byte

 
[

 
]

 
>

 
Crop

 
(

 
byte

 
[

 
]

  
source

! '
)

' (
;

( )
Task 
< 
List 
< 
byte 
[ 
] 
> 
> 
Split  
(  !
byte! %
[% &
]& '
source( .
). /
;/ 0
Task 
< 
float 
> 
Predict 
( 
byte  
[  !
]! "
source# )
)) *
;* +
} 
} Üπ
tD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageProcessor.cs
	namespace

 	
Services


 
.

 
ImageService

 
{ 
public 

class 
ImageProcessor 
{ 
private 
readonly 
Image 
< 
Rgba32 %
>% &
image' ,
;, -
private 
string 
ImageMatrix "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
ImageProcessor 
( 
byte "
[" #
]# $
source% +
)+ ,
{ 	
image 
= 
Image 
. 
Load 
< 
Rgba32 %
>% &
(& '
source' -
)- .
;. /
} 	
private 
Task 
< 
int 
[ 
, 
] 
> #
GetPixelMatrixFromImage 4
(4 5
)5 6
{ 	
int 
[ 
, 
] 
result 
= 
new 
int  #
[# $
image$ )
.) *
Height* 0
,0 1
image2 7
.7 8
Width8 =
]= >
;> ?
StringBuilder 
lines 
=  !
new" %
StringBuilder& 3
(3 4
)4 5
;5 6
for 
( 
int 
i 
= 
$num 
; 
i 
< 
image  %
.% &
Height& ,
;, -
i. /
++/ 1
)1 2
{ 
lines 
. 
Append 
( 
$char  
)  !
;! "
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
image$ )
.) *
Width* /
;/ 0
j1 2
++2 4
)4 5
{ 
Rgba32   
pixel    
=  ! "
image  # (
[  ( )
j  ) *
,  * +
i  , -
]  - .
;  . /
if!! 
(!! 
pixel!! 
.!! 
R!! 
<=!!  "
$num!!# %
||!!& (
pixel!!) .
.!!. /
G!!/ 0
<=!!1 3
$num!!4 6
||!!7 9
pixel!!: ?
.!!? @
B!!@ A
<=!!B D
$num!!E G
)!!G H
{"" 
result## 
[## 
i##  
,##  !
j##" #
]### $
=##% &
pixel##' ,
.##, -
A##- .
;##. /
lines$$ 
.$$ 
Append$$ $
($$$ %
pixel$$% *
.$$* +
A$$+ ,
.$$, -
ToString$$- 5
($$5 6
)$$6 7
+$$8 9
$str$$: =
)$$= >
;$$> ?
}%% 
else&& 
{'' 
result(( 
[(( 
i((  
,((  !
j((" #
]((# $
=((% &
$num((' (
;((( )
lines)) 
.)) 
Append)) $
())$ %
$str))% *
)))* +
;))+ ,
}** 
},, 
lines-- 
.-- 
Append-- 
(-- 
$str-- #
)--# $
;--$ %
}.. 
ImageMatrix// 
=// 
lines// 
.//  
ToString//  (
(//( )
)//) *
;//* +
File00 
.00 
WriteAllLines00 
(00 
$str00 )
,00) *
ImageMatrix00+ 6
.006 7
Split007 <
(00< =
$str00= A
)00A B
)00B C
;00C D
return11 
Task11 
.11 

FromResult11 "
(11" #
result11# )
)11) *
;11* +
}22 	
private44 
Image44 
<44 
Rgba3244 
>44 
FillToAspectRatio44 /
(44/ 0
int440 3
width444 9
,449 :
int44; >
height44? E
)44E F
{55 	
double66 
ratioH66 
=66 
Math66  
.66  !
Max66! $
(66$ %
(66% &
double66& ,
)66, -
width66- 2
/663 4
image665 :
.66: ;
Width66; @
,66@ A
(66B C
double66C I
)66I J
image66J O
.66O P
Width66P U
/66V W
width66X ]
)66] ^
;66^ _
double77 
ratioW77 
=77 
Math77  
.77  !
Max77! $
(77$ %
(77% &
double77& ,
)77, -
height77- 3
/774 5
image776 ;
.77; <
Height77< B
,77B C
(77D E
double77E K
)77K L
image77L Q
.77Q R
Height77R X
/77Y Z
height77[ a
)77a b
;77b c
Size88 
newSize88 
=88 
new88 
Size88 #
(88# $
(88$ %
int88% (
)88( )
(88) *
width88* /
*880 1
ratioW882 8
)888 9
+88: ;
(88< =
image88= B
.88B C
Width88C H
/88I J
$num88K L
)88L M
,88M N
(88O P
int88P S
)88S T
(88T U
height88U [
*88\ ]
ratioH88^ d
)88d e
+88f g
(88h i
image88i n
.88n o
Height88o u
/88v w
$num88x y
)88y z
)88z {
;88{ |
Image99 
<99 
Rgba3299 
>99 
newImage99 "
=99# $
new99% (
Image99) .
<99. /
Rgba3299/ 5
>995 6
(996 7
newSize997 >
.99> ?
Width99? D
,99D E
newSize99F M
.99M N
Height99N T
)99T U
;99U V
newImage;; 
.;; 
Mutate;; 
(;; 
ic;; 
=>;; !
{<< 
ic== 
.== 
Fill== 
(== 
Color== 
.== 
White== #
,==# $
new==% (

RectangleF==) 3
(==3 4
$num==4 5
,==5 6
$num==7 8
,==8 9
newSize==: A
.==A B
Width==B G
,==G H
newSize==I P
.==P Q
Height==Q W
)==W X
)==X Y
;==Y Z
ic>> 
.>> 
	DrawImage>> 
(>> 
image>> "
,>>" #
new>>$ '
Point>>( -
(>>- .
(>>. /
newSize>>/ 6
.>>6 7
Width>>7 <
/>>= >
$num>>? @
)>>@ A
->>B C
(>>D E
image>>E J
.>>J K
Width>>K P
/>>Q R
$num>>S T
)>>T U
,>>U V
(>>W X
newSize>>X _
.>>_ `
Height>>` f
/>>g h
$num>>i j
)>>j k
->>l m
(>>n o
image>>o t
.>>t u
Height>>u {
/>>| }
$num>>~ 
)	>> Ä
)
>>Ä Å
,
>>Å Ç
$num
>>É Ñ
)
>>Ñ Ö
;
>>Ö Ü
}?? 
)?? 
;?? 
returnAA 
newImageAA 
;AA 
}BB 	
publicDD 
asyncDD 
TaskDD 
<DD 
byteDD 
[DD 
]DD  
>DD  !
ResizeDD" (
(DD( )
intDD) ,
widthDD- 2
,DD2 3
intDD4 7
heightDD8 >
)DD> ?
{EE 	
ImageFF 
<FF 
Rgba32FF 
>FF 
newImageFF "
=FF# $
awaitFF% *
TaskFF+ /
.FF/ 0
RunFF0 3
(FF3 4
(FF4 5
)FF5 6
=>FF7 9
FillToAspectRatioFF: K
(FFK L
widthFFL Q
,FFQ R
heightFFS Y
)FFY Z
)FFZ [
;FF[ \
newImageGG 
.GG 
MutateGG 
(GG 
icGG 
=>GG !
{HH 
icII 
.II 
ResizeII 
(II 
widthII 
,II  
heightII! '
)II' (
;II( )
}JJ 
)JJ 
;JJ 
varLL 
streamLL 
=LL 
newLL 
MemoryStreamLL )
(LL) *
)LL* +
;LL+ ,
newImageMM 
.MM 
	SaveAsPngMM 
(MM 
streamMM %
)MM% &
;MM& '
newImageOO 
.OO 
DisposeOO 
(OO 
)OO 
;OO 
returnQQ 
streamQQ 
.QQ 
ToArrayQQ !
(QQ! "
)QQ" #
;QQ# $
}RR 	
publicUU 
asyncUU 
TaskUU 
<UU 
byteUU 
[UU 
]UU  
>UU  !
CropUU" &
(UU& '
)UU' (
{VV 	
intWW 
[WW 
,WW 
]WW 
imageMatrixWW 
=WW  
awaitWW! &
TaskWW' +
.WW+ ,
RunWW, /
(WW/ 0#
GetPixelMatrixFromImageWW0 G
)WWG H
;WWH I
intYY 
minWYY 
=YY 
imageYY 
.YY 
WidthYY "
;YY" #
intZZ 
maxWZZ 
=ZZ 
$numZZ 
;ZZ 
int\\ 
minH\\ 
=\\ 
image\\ 
.\\ 
Height\\ #
;\\# $
int]] 
maxH]] 
=]] 
$num]] 
;]] 
for__ 
(__ 
int__ 
i__ 
=__ 
$num__ 
;__ 
i__ 
<__ 
image__  %
.__% &
Height__& ,
;__, -
i__. /
++__/ 1
)__1 2
{`` 
foraa 
(aa 
intaa 
jaa 
=aa 
$numaa 
;aa 
jaa  !
<aa" #
imageaa$ )
.aa) *
Widthaa* /
;aa/ 0
jaa1 2
++aa2 4
)aa4 5
{bb 
ifcc 
(cc 
imageMatrixcc #
[cc# $
icc$ %
,cc% &
jcc' (
]cc( )
==cc* ,
$numcc- 0
&&cc1 3
jcc4 5
>cc6 7
maxWcc8 <
)cc< =
maxWdd 
=dd 
jdd  
;dd  !
ifee 
(ee 
imageMatrixee #
[ee# $
iee$ %
,ee% &
jee' (
]ee( )
==ee* ,
$numee- 0
&&ee1 3
jee4 5
<ee6 7
minWee8 <
)ee< =
minWff 
=ff 
jff  
;ff  !
ifgg 
(gg 
imageMatrixgg #
[gg# $
igg$ %
,gg% &
jgg' (
]gg( )
==gg* ,
$numgg- 0
&&gg1 3
igg4 5
>gg6 7
maxHgg8 <
)gg< =
maxHhh 
=hh 
ihh  
;hh  !
ifii 
(ii 
imageMatrixii #
[ii# $
iii$ %
,ii% &
jii' (
]ii( )
==ii* ,
$numii- 0
&&ii1 3
iii4 5
<ii6 7
minHii8 <
)ii< =
minHjj 
=jj 
ijj  
;jj  !
}kk 
}ll 
intnn 
widthBlackSpacesnn  
=nn! "
maxWnn# '
-nn( )
minWnn* .
+nn/ 0
$numnn1 2
;nn2 3
intoo 
heightBlackSpacesoo !
=oo" #
maxHoo$ (
-oo) *
minHoo+ /
+oo0 1
$numoo2 3
;oo3 4
Imageqq 
<qq 
Rgba32qq 
>qq 
resultqq  
=qq! "
newqq# &
Imageqq' ,
<qq, -
Rgba32qq- 3
>qq3 4
(qq4 5
widthBlackSpacesqq5 E
,qqE F
heightBlackSpacesqqG X
)qqX Y
;qqY Z
intss 
[ss 
,ss 
]ss 
resultMatrixss 
=ss  !
newss" %
intss& )
[ss) *
heightBlackSpacesss* ;
,ss; <
widthBlackSpacesss= M
]ssM N
;ssN O
foruu 
(uu 
intuu 
iuu 
=uu 
$numuu 
;uu 
iuu 
<uu 
heightBlackSpacesuu  1
;uu1 2
iuu3 4
++uu4 6
)uu6 7
{vv 
forww 
(ww 
intww 
jww 
=ww 
$numww 
;ww 
jww  !
<ww" #
widthBlackSpacesww$ 4
;ww4 5
jww6 7
++ww7 9
)ww9 :
{xx 
resultMatrixyy  
[yy  !
iyy! "
,yy" #
jyy$ %
]yy% &
=yy' (
imageMatrixyy) 4
[yy4 5
minHyy5 9
+yy: ;
iyy< =
,yy= >
minWyy? C
+yyD E
jyyF G
]yyG H
;yyH I
ifzz 
(zz 
resultMatrixzz $
[zz$ %
izz% &
,zz& '
jzz( )
]zz) *
==zz+ -
$numzz. /
)zz/ 0
{{{ 
result|| 
[|| 
j||  
,||  !
i||! "
]||" #
=||$ %
Color||& +
.||+ ,
FromRgb||, 3
(||3 4
$num||4 7
,||7 8
$num||9 <
,||< =
$num||> A
)||A B
;||B C
}}} 
else~~ 
{ 
result
ÄÄ 
[
ÄÄ 
j
ÄÄ  
,
ÄÄ  !
i
ÄÄ" #
]
ÄÄ# $
=
ÄÄ% &
Color
ÄÄ' ,
.
ÄÄ, -
FromRgba
ÄÄ- 5
(
ÄÄ5 6
$num
ÄÄ6 7
,
ÄÄ7 8
$num
ÄÄ9 :
,
ÄÄ: ;
$num
ÄÄ< =
,
ÄÄ= >
Convert
ÄÄ? F
.
ÄÄF G
ToByte
ÄÄG M
(
ÄÄM N
resultMatrix
ÄÄN Z
[
ÄÄZ [
i
ÄÄ[ \
,
ÄÄ\ ]
j
ÄÄ^ _
]
ÄÄ_ `
)
ÄÄ` a
)
ÄÄa b
;
ÄÄb c
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
var
ÖÖ 
stream
ÖÖ 
=
ÖÖ 
new
ÖÖ 
MemoryStream
ÖÖ )
(
ÖÖ) *
)
ÖÖ* +
;
ÖÖ+ ,
result
ÜÜ 
.
ÜÜ 
	SaveAsPng
ÜÜ 
(
ÜÜ 
stream
ÜÜ #
)
ÜÜ# $
;
ÜÜ$ %
result
àà 
.
àà 
Dispose
àà 
(
àà 
)
àà 
;
àà 
return
ââ 
stream
ââ 
.
ââ 
ToArray
ââ !
(
ââ! "
)
ââ" #
;
ââ# $
}
ää 	
private
åå 
Image
åå 
<
åå 
Rgba32
åå 
>
åå 
ImageCreator
åå *
(
åå* +
int
åå+ .

splitIndex
åå/ 9
,
åå9 :
int
åå; >
	lastSplit
åå? H
,
ååH I
int
ååJ M
[
ååM N
,
ååN O
]
ååO P
imageMatrix
ååQ \
)
åå\ ]
{
çç 	
Image
éé 
<
éé 
Rgba32
éé 
>
éé 
temp
éé 
=
éé  
new
éé! $
Image
éé% *
<
éé* +
Rgba32
éé+ 1
>
éé1 2
(
éé2 3

splitIndex
éé3 =
-
éé> ?
	lastSplit
éé@ I
,
ééI J
image
ééK P
.
ééP Q
Height
ééQ W
)
ééW X
;
ééX Y
for
èè 
(
èè 
int
èè 
j
èè 
=
èè 
$num
èè 
;
èè 
j
èè 
<
èè 
image
èè  %
.
èè% &
Height
èè& ,
;
èè, -
j
èè. /
++
èè/ 1
)
èè1 2
for
êê 
(
êê 
int
êê 
i
êê 
=
êê 
	lastSplit
êê &
;
êê& '
i
êê( )
<
êê* +

splitIndex
êê, 6
;
êê6 7
i
êê8 9
++
êê9 ;
)
êê; <
{
ëë 
if
íí 
(
íí 
imageMatrix
íí #
[
íí# $
j
íí$ %
,
íí% &
i
íí' (
]
íí( )
==
íí* ,
$num
íí- .
)
íí. /
{
ìì 
temp
îî 
[
îî 
i
îî 
-
îî  
	lastSplit
îî! *
,
îî* +
j
îî, -
]
îî- .
=
îî/ 0
Color
îî1 6
.
îî6 7
FromRgb
îî7 >
(
îî> ?
$num
îî? B
,
îîB C
$num
îîD G
,
îîG H
$num
îîI L
)
îîL M
;
îîM N
}
ïï 
else
ññ 
{
óó 
temp
òò 
[
òò 
i
òò 
-
òò  
	lastSplit
òò! *
,
òò* +
j
òò, -
]
òò- .
=
òò/ 0
Color
òò1 6
.
òò6 7
FromRgba
òò7 ?
(
òò? @
$num
òò@ A
,
òòA B
$num
òòC D
,
òòD E
$num
òòF G
,
òòG H
Convert
òòI P
.
òòP Q
ToByte
òòQ W
(
òòW X
imageMatrix
òòX c
[
òòc d
j
òòd e
,
òòe f
i
òòg h
]
òòh i
)
òòi j
)
òòj k
;
òòk l
}
ôô 
}
öö 
return
õõ 
temp
õõ 
;
õõ 
}
úú 	
public
ûû 
async
ûû 
Task
ûû 
<
ûû 
List
ûû 
<
ûû 
byte
ûû #
[
ûû# $
]
ûû$ %
>
ûû% &
>
ûû& '
Split
ûû( -
(
ûû- .
)
ûû. /
{
üü 	
List
†† 
<
†† 
byte
†† 
[
†† 
]
†† 
>
†† 
result
†† 
=
††  !
new
††" %
List
††& *
<
††* +
byte
††+ /
[
††/ 0
]
††0 1
>
††1 2
(
††2 3
)
††3 4
;
††4 5
int
°° 
[
°° 
,
°° 
]
°° 
imageMatrix
°° 
=
°°  
await
°°! &
Task
°°' +
.
°°+ ,
Run
°°, /
(
°°/ 0%
GetPixelMatrixFromImage
°°0 G
)
°°G H
;
°°H I
int
¢¢ 
lastNotBank
¢¢ 
=
¢¢ 
-
¢¢ 
$num
¢¢  
;
¢¢  !
List
££ 
<
££ 
int
££ 
>
££ 
	splitList
££ 
=
££  !
new
££" %
List
££& *
<
££* +
int
££+ .
>
££. /
(
££/ 0
)
££0 1
;
££1 2
for
•• 
(
•• 
int
•• 
j
•• 
=
•• 
$num
•• 
;
•• 
j
•• 
<
•• 
image
••  %
.
••% &
Width
••& +
;
••+ ,
j
••- .
++
••. 0
)
••0 1
{
¶¶ 
bool
ßß 
isLineWhite
ßß  
=
ßß! "
true
ßß# '
;
ßß' (
for
®® 
(
®® 
int
®® 
i
®® 
=
®® 
$num
®® 
;
®® 
i
®®  !
<
®®" #
image
®®$ )
.
®®) *
Height
®®* 0
;
®®0 1
i
®®2 3
++
®®3 5
)
®®5 6
if
©© 
(
©© 
imageMatrix
©© #
[
©©# $
i
©©$ %
,
©©% &
j
©©' (
]
©©( )
==
©©* ,
$num
©©- 0
)
©©0 1
{
™™ 
isLineWhite
´´ #
=
´´$ %
false
´´& +
;
´´+ ,
lastNotBank
¨¨ #
=
¨¨$ %
$num
¨¨& '
;
¨¨' (
}
≠≠ 
if
ÆÆ 
(
ÆÆ 
isLineWhite
ÆÆ 
&&
ÆÆ  "
lastNotBank
ÆÆ# .
!=
ÆÆ/ 1
-
ÆÆ2 3
$num
ÆÆ3 4
)
ÆÆ4 5
{
ØØ 
	splitList
∞∞ 
.
∞∞ 
Add
∞∞ !
(
∞∞! "
j
∞∞" #
)
∞∞# $
;
∞∞$ %
lastNotBank
±± 
=
±±  !
-
±±" #
$num
±±# $
;
±±$ %
}
≤≤ 
}
≥≥ 
int
µµ 
	lastSplit
µµ 
=
µµ 
$num
µµ 
;
µµ 
foreach
∑∑ 
(
∑∑ 
int
∑∑ 

splitIndex
∑∑ #
in
∑∑$ &
	splitList
∑∑' 0
)
∑∑0 1
{
∏∏ 
Image
ππ 
<
ππ 
Rgba32
ππ 
>
ππ 
temp
ππ "
=
ππ# $
ImageCreator
ππ% 1
(
ππ1 2

splitIndex
ππ2 <
,
ππ< =
	lastSplit
ππ> G
,
ππG H
imageMatrix
ππI T
)
ππT U
;
ππU V
	lastSplit
∫∫ 
=
∫∫ 

splitIndex
∫∫ &
;
∫∫& '
var
ºº 
stream
ºº 
=
ºº 
new
ºº  
MemoryStream
ºº! -
(
ºº- .
)
ºº. /
;
ºº/ 0
temp
ΩΩ 
.
ΩΩ 
	SaveAsPng
ΩΩ 
(
ΩΩ 
stream
ΩΩ %
)
ΩΩ% &
;
ΩΩ& '
temp
ææ 
.
ææ 
Dispose
ææ 
(
ææ 
)
ææ 
;
ææ 
result
øø 
.
øø 
Add
øø 
(
øø 
stream
øø !
.
øø! "
ToArray
øø" )
(
øø) *
)
øø* +
)
øø+ ,
;
øø, -
}
¡¡ 
return
√√ 
result
√√ 
;
√√ 
}
ƒƒ 	
public
∆∆ 
async
∆∆ 
Task
∆∆ 
<
∆∆ 
IEnumerable
∆∆ %
<
∆∆% &
float
∆∆& +
>
∆∆+ ,
>
∆∆, - 
GetFlattenedMatrix
∆∆. @
(
∆∆@ A
)
∆∆A B
{
«« 	
List
»» 
<
»» 
float
»» 
>
»» 
result
»» 
=
»»  
new
»»! $
List
»»% )
<
»») *
float
»»* /
>
»»/ 0
(
»»0 1
)
»»1 2
;
»»2 3
int
…… 
[
…… 
,
…… 
]
…… 
pixelMatrix
…… 
=
……  
await
……! &
Task
……' +
.
……+ ,
Run
……, /
(
……/ 0%
GetPixelMatrixFromImage
……0 G
)
……G H
;
……H I
foreach
   
(
   
int
   
x
   
in
   
pixelMatrix
   (
)
  ( )
{
ÀÀ 
result
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
x
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
return
ŒŒ 
result
ŒŒ 
;
ŒŒ 
}
œœ 	
public
““ 
override
““ 
string
““ 
ToString
““ '
(
““' (
)
““( )
{
”” 	
return
‘‘ 
ImageMatrix
‘‘ 
;
‘‘ 
}
’’ 	
}
÷÷ 
}◊◊ ˆ
rD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

class 
ImageService 
: 
IImageService  -
{		 
public

 
async

 
Task

 
<

 
byte

 
[

 
]

  
>

  !
Resize

" (
(

( )
byte

) -
[

- .
]

. /
source

0 6
,

6 7
int

7 :
width

; @
,

@ A
int

B E
height

F L
)

L M
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Resize4 :
(: ;
width; @
,@ A
heightA G
)G H
;H I
} 	
public 
async 
Task 
< 
byte 
[ 
]  
>  !
Crop" &
(& '
byte' +
[+ ,
], -
source. 4
)4 5
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Crop4 8
(8 9
)9 :
;: ;
} 	
public 
async 
Task 
< 
List 
< 
byte #
[# $
]$ %
>% &
>& '
Split( -
(- .
byte. 2
[2 3
]3 4
source5 ;
); <
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Split4 9
(9 :
): ;
;; <
} 	
public 
async 
Task 
< 
float 
>  
Predict  '
(' (
byte( ,
[, -
]- .
source/ 5
)5 6
{ 	
return 
new 
NumberRecognition (
(( )
)) *
.* +
Predict+ 2
(2 3
await3 8
new9 <
ImageProcessor= K
(K L
sourceL R
)R S
.S T
GetFlattenedMatrixT f
(f g
)g h
)h i
;i j
} 	
} 
} ﬁc
wD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\NumberRecognition.cs
	namespace 	
NumberRecognitionML
 
{ 
public 

class 
Digit 
{ 
public   
float   
Number   
{   
get   !
;  ! "
set  # &
;  & '
}  ( )
[!! 	

VectorType!!	 
(!! 
$num!! 
)!! 
]!! 
public!!  
float!!! &
[!!& '
]!!' (
PixelValues!!) 4
{!!5 6
get!!7 :
;!!: ;
set!!< ?
;!!? @
}!!A B
}"" 
public'' 

class'' 
DigitPrediction''  
{(( 
[)) 	

ColumnName))	 
()) 
$str)) 
))) 
])) 
public** 
float** 
[** 
]** 
Score** 
{** 
get** "
;**" #
set**$ '
;**' (
}**) *
public++ 
float++ 
PredictedNumber++ $
{++% &
get++' *
;++* +
set++, /
;++/ 0
}++1 2
},, 
public.. 

class.. 
NumberRecognition.. "
{// 
private00 
static00 
bool00 

hasHeaders00 &
=00' (
true00) -
;00- .
public11 
void11 
Train11 
(11 
string11  
dataPath11! )
,11) *
string11+ 1
	modelPath112 ;
,11; <
string11< B
testPath11C K
)11K L
{22 	
var44 
context44 
=44 
new44 
	MLContext44 '
(44' (
)44( )
;44) *
Trace77 
.77 
	WriteLine77 
(77 
$str77 .
)77. /
;77/ 0
var88 
dataView88 
=88 
context88 "
.88" #
Data88# '
.88' (
LoadFromTextFile88( 8
(888 9
path99 
:99 
dataPath99 
,99 
columns:: 
::: 
new:: 
[:: 
]:: 
{;; 
new<< 

TextLoader<< "
.<<" #
Column<<# )
(<<) *
$str<<* 2
,<<2 3
DataKind<<4 <
.<<< =
Single<<= C
,<<C D
$num<<E F
)<<F G
,<<G H
new== 

TextLoader== "
.==" #
Column==# )
(==) *
nameof==* 0
(==0 1
Digit==1 6
.==6 7
PixelValues==7 B
)==B C
,==C D
DataKind==E M
.==M N
Single==N T
,==T U
$num==V W
,==W X
$num==Y \
)==\ ]
}>> 
,>> 
	hasHeader?? 
:?? 

hasHeaders?? %
,??% &
separatorChar@@ 
:@@ 
$char@@ "
)@@" #
;@@# $
varAA 
testSetAA 
=AA 
contextAA !
.AA! "
DataAA" &
.AA& '
LoadFromTextFileAA' 7
(AA7 8
pathBB 
:BB 
testPathBB 
,BB 
columnsCC 
:CC 
newCC 
[CC 
]CC 
{DD 
newEE 

TextLoaderEE "
.EE" #
ColumnEE# )
(EE) *
$strEE* 2
,EE2 3
DataKindEE4 <
.EE< =
SingleEE= C
,EEC D
$numEEE F
)EEF G
,EEG H
newFF 

TextLoaderFF "
.FF" #
ColumnFF# )
(FF) *
nameofFF* 0
(FF0 1
DigitFF1 6
.FF6 7
PixelValuesFF7 B
)FFB C
,FFC D
DataKindFFE M
.FFM N
SingleFFN T
,FFT U
$numFFV W
,FFW X
$numFFY \
)FF\ ]
}GG 
,GG 
	hasHeaderHH 
:HH 

hasHeadersHH %
,HH% &
separatorCharII 
:II 
$charII "
)II" #
;II# $
varOO 
pipelineOO 
=OO 
contextOO "
.OO" #

TransformsOO# -
.OO- .
ConcatenateOO. 9
(OO9 :
$strOO: D
,OOD E
nameofQQ 
(QQ 
DigitQQ 
.QQ 
PixelValuesQQ (
)QQ( )
)QQ) *
.SS 
AppendSS 
(SS 
contextSS 
.SS  

TransformsSS  *
.SS* +

ConversionSS+ 5
.SS5 6
MapValueToKeySS6 C
(SSC D
inputColumnNameSSD S
:SSS T
$strSSU ]
,SS] ^
outputColumnNameSS_ o
:SSo p
$strSSq x
)SSx y
)SSy z
.VV !
AppendCacheCheckpointVV &
(VV& '
contextVV' .
)VV. /
.YY 
AppendYY 
(YY 
contextYY 
.YY  $
MulticlassClassificationYY  8
.YY8 9
TrainersYY9 A
.YYA B
SdcaMaximumEntropyYYB T
(YYT U
labelColumnNameZZ #
:ZZ# $
$strZZ% ,
,ZZ, -
featureColumnName[[ %
:[[% &
$str[[' 1
)[[1 2
)[[2 3
.]] 
Append]] 
(]] 
context]] 
.]]  

Transforms]]  *
.]]* +

Conversion]]+ 5
.]]5 6
MapKeyToValue]]6 C
(]]C D
$str]]D U
,]]U V
$str]]W g
)]]g h
)]]h i
;]]i j
Trace`` 
.`` 
	WriteLine`` 
(`` 
$str`` 0
)``0 1
;``1 2
varaa 
modelaa 
=aa 
pipelineaa  
.aa  !
Fitaa! $
(aa$ %
dataViewaa% -
)aa- .
;aa. /
Traceee 
.ee 
	WriteLineee 
(ee 
$stree 2
)ee2 3
;ee3 4
varff 
predictionsff 
=ff 
modelff #
.ff# $
	Transformff$ -
(ff- .
testSetff. 5
)ff5 6
;ff6 7
varii 
metricsii 
=ii 
contextii !
.ii! "$
MulticlassClassificationii" :
.ii: ;
Evaluateii; C
(iiC D
datajj 
:jj 
predictionsjj !
)mm 
;mm 
Tracepp 
.pp 
	WriteLinepp 
(pp 
$"pp 
$strpp 0
"pp0 1
)pp1 2
;pp2 3
Traceqq 
.qq 
	WriteLineqq 
(qq 
$"qq 
$strqq 4
{qq4 5
metricsqq5 <
.qq< =
MicroAccuracyqq= J
:qqJ K
$strqqK P
}qqP Q
"qqQ R
)qqR S
;qqS T
Tracerr 
.rr 
	WriteLinerr 
(rr 
$"rr 
$strrr 4
{rr4 5
metricsrr5 <
.rr< =
MacroAccuracyrr= J
:rrJ K
$strrrK P
}rrP Q
"rrQ R
)rrR S
;rrS T
Tracess 
.ss 
	WriteLiness 
(ss 
$"ss 
$strss 4
{ss4 5
metricsss5 <
.ss< =
LogLossss= D
:ssD E
$strssE J
}ssJ K
"ssK L
)ssL M
;ssM N
Tracett 
.tt 
	WriteLinett 
(tt 
$"tt 
$strtt 4
{tt4 5
metricstt5 <
.tt< =
LogLossReductiontt= M
:ttM N
$strttN S
}ttS T
"ttT U
)ttU V
;ttV W
contextvv 
.vv 
Modelvv 
.vv 
Savevv 
(vv 
modelvv $
,vv$ %
dataViewvv& .
.vv. /
Schemavv/ 5
,vv5 6
	modelPathvv7 @
)vv@ A
;vvA B
Traceww 
.ww 
	WriteLineww 
(ww 
$"ww 
$strww $
{ww$ %
	modelPathww% .
}ww. /
$strww/ 6
"ww6 7
)ww7 8
;ww8 9
_predictionEngineyy 
=yy 
contextyy  '
.yy' (
Modelyy( -
.yy- ."
CreatePredictionEngineyy. D
<yyD E
DigityyE J
,yyJ K
DigitPredictionyyL [
>yy[ \
(yy\ ]
modelyy] b
)yyb c
;yyc d
}zz 	
private|| 
PredictionEngine||  
<||  !
Digit||! &
,||& '
DigitPrediction||( 7
>||7 8
_predictionEngine||9 J
;||J K
public~~ 
void~~ 
	LoadModel~~ 
(~~ 
string~~ $
	modelPath~~% .
)~~. /
{ 	
var
ÄÄ 
context
ÄÄ 
=
ÄÄ 
new
ÄÄ 
	MLContext
ÄÄ '
(
ÄÄ' (
)
ÄÄ( )
;
ÄÄ) *
DataViewSchema
ÅÅ 
schema
ÅÅ !
;
ÅÅ! "
var
ÇÇ 
model
ÇÇ 
=
ÇÇ 
context
ÇÇ 
.
ÇÇ  
Model
ÇÇ  %
.
ÇÇ% &
Load
ÇÇ& *
(
ÇÇ* +
	modelPath
ÇÇ+ 4
,
ÇÇ4 5
out
ÇÇ6 9
schema
ÇÇ: @
)
ÇÇ@ A
;
ÇÇA B
_predictionEngine
ÉÉ 
=
ÉÉ 
context
ÉÉ  '
.
ÉÉ' (
Model
ÉÉ( -
.
ÉÉ- .$
CreatePredictionEngine
ÉÉ. D
<
ÉÉD E
Digit
ÉÉE J
,
ÉÉJ K
DigitPrediction
ÉÉL [
>
ÉÉ[ \
(
ÉÉ\ ]
model
ÉÉ] b
)
ÉÉb c
;
ÉÉc d
Trace
ÑÑ 
.
ÑÑ 
	WriteLine
ÑÑ 
(
ÑÑ 
$"
ÑÑ 
$str
ÑÑ $
{
ÑÑ$ %
	modelPath
ÑÑ% .
}
ÑÑ. /
$str
ÑÑ/ 7
"
ÑÑ7 8
)
ÑÑ8 9
;
ÑÑ9 :
}
ÖÖ 	
public
áá 
DigitPrediction
áá 
PredictDigit
áá +
(
áá+ ,
Digit
áá, 1
digit
áá2 7
)
áá7 8
{
àà 	
try
ââ 
{
ää 
return
ãã 
_predictionEngine
ãã (
.
ãã( )
Predict
ãã) 0
(
ãã0 1
digit
ãã1 6
)
ãã6 7
;
ãã7 8
}
åå 
catch
çç 
(
çç 
	Exception
çç 
exp
çç  
)
çç  !
{
éé 
Trace
èè 
.
èè 
	WriteLine
èè 
(
èè  
$str
èè  B
+
èèC D
exp
èèE H
.
èèH I
Message
èèI P
)
èèP Q
;
èèQ R
return
êê 
null
êê 
;
êê 
}
ëë 
}
íí 	
private
îî 
readonly
îî 
string
îî 
	modelPath
îî  )
=
îî* +
$str
îî, T
;
îîT U
public
ïï 
float
ïï 
Predict
ïï 
(
ïï 
IEnumerable
ïï (
<
ïï( )
float
ïï) .
>
ïï. /

attributes
ïï0 :
)
ïï: ;
{
ññ 	
Digit
óó 
digit
óó 
=
óó 
new
óó 
Digit
óó #
(
óó# $
)
óó$ %
;
óó% &
digit
òò 
.
òò 
PixelValues
òò 
=
òò 

attributes
òò  *
.
òò* +
ToArray
òò+ 2
(
òò2 3
)
òò3 4
;
òò4 5
for
ôô 
(
ôô 
int
ôô 
i
ôô 
=
ôô 
$num
ôô 
;
ôô 
i
ôô 
<
ôô 
$num
ôô  #
;
ôô# $
i
ôô% &
++
ôô& (
)
ôô( )
{
öö 
if
õõ 
(
õõ 
digit
õõ 
.
õõ 
PixelValues
õõ %
[
õõ% &
i
õõ& '
]
õõ' (
>
õõ) *
$num
õõ+ -
)
õõ- .
digit
úú 
.
úú 
PixelValues
úú %
[
úú% &
i
úú& '
]
úú' (
=
úú) *
$num
úú+ -
;
úú- .
}
ùù 
	LoadModel
üü 
(
üü 
	modelPath
üü 
)
üü  
;
üü  !
var
†† 
predictionResult
††  
=
††! "
PredictDigit
††# /
(
††/ 0
digit
††0 5
)
††5 6
;
††6 7
return
°° 
predictionResult
°° #
.
°°# $
PredictedNumber
°°$ 3
;
°°3 4
}
¢¢ 	
}
££ 
}§§ 