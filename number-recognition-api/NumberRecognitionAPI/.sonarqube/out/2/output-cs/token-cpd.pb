ê/
vD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\DatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public		 

class		 
DatasetService		 
:		  !
IDatasetService		" 1
{

 
private 
readonly 
IRepository $
<$ %
Dataset% ,
>, -
_repository. 9
;9 :
public 
DatasetService 
( 
IRepository )
<) *
Dataset* 1
>1 2

repository3 =
)= >
{ 	
_repository 
= 

repository $
;$ %
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /
GetAllDatasetAsync0 B
(B C
stringC I
labelJ O
,O P
intQ T
limitU Z
=[ \
$num] _
)_ `
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
d= >
.> ?
Label? D
==E G
labelH M
)M N
;N O
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /"
GetAllTestDatasetAsync0 F
(F G
stringG M
labelN S
,S T
intU X
limitY ^
=_ `
$numa c
)c d
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
(= >
bool> B
)B C
dC D
.D E
IsTestE K
&&L N
dO P
.P Q
LabelQ V
==W Y
labelZ _
)_ `
;` a
} 	
public 
async 
Task 
< 
IEnumerable %
<% &
Dataset& -
>- .
>. /#
GetAllTrainDatasetAsync0 G
(G H
stringH N
labelO T
,T U
intV Y
limitZ _
=` a
$numb d
)d e
{ 	
return 
await 
_repository $
.$ %
GetAllAsync% 0
(0 1
limit1 6
,6 7
d8 9
=>: <
!= >
(> ?
bool? C
)C D
dD E
.E F
IsTestF L
&&M O
dP Q
.Q R
LabelR W
==X Z
label[ `
)` a
;a b
} 	
public   
async   
Task   
<   
Dataset   !
>  ! "
GetDatasetAsync  # 2
(  2 3
Guid  3 7
id  8 :
)  : ;
{!! 	
return"" 
await"" 
_repository"" $
.""$ %
GetByIdAsync""% 1
(""1 2
id""2 4
)""4 5
;""5 6
}## 	
public%% 
async%% 
Task%% 
<%% 
bool%% 
>%% 
InsertIntoDataset%%  1
(%%1 2
Dataset%%2 9
dataset%%: A
)%%A B
{&& 	
try'' 
{(( 
await)) 
_repository)) !
.))! "
InsertAsync))" -
())- .
dataset)). 5
)))5 6
;))6 7
return** 
true** 
;** 
}++ 
catch,, 
(,, 
	Exception,, 
ex,, 
),,  
{-- 
Console.. 
... 
	WriteLine.. !
(..! "
ex.." $
)..$ %
;..% &
return// 
false// 
;// 
}00 
}11 	
public33 
async33 
Task33 
<33 
bool33 
>33 
UpdateDataset33  -
(33- .
Dataset33. 5
dataset336 =
)33= >
{44 	
try55 
{66 
await77 
_repository77 !
.77! "
UpdateAsync77" -
(77- .
dataset77. 5
)775 6
;776 7
return88 
true88 
;88 
}99 
catch:: 
(:: 
	Exception:: 
ex:: 
)::  
{;; 
Console<< 
.<< 
	WriteLine<< !
(<<! "
ex<<" $
)<<$ %
;<<% &
return== 
false== 
;== 
}>> 
}?? 	
publicAA 
asyncAA 
TaskAA 
<AA 
boolAA 
>AA "
DeleteFromDatasetAsyncAA  6
(AA6 7
GuidAA7 ;
idAA< >
)AA> ?
{BB 	
tryCC 
{DD 
DatasetEE 
datasetEE 
=EE  !
awaitEE" '
_repositoryEE( 3
.EE3 4
GetByIdAsyncEE4 @
(EE@ A
idEEA C
)EEC D
;EED E
awaitFF 
_repositoryFF !
.FF! "
DeleteAsyncFF" -
(FF- .
datasetFF. 5
)FF5 6
;FF6 7
returnGG 
trueGG 
;GG 
}HH 
catchII 
(II 
	ExceptionII 
exII 
)II  
{JJ 
ConsoleKK 
.KK 
	WriteLineKK !
(KK! "
exKK" $
)KK$ %
;KK% &
returnLL 
falseLL 
;LL 
}MM 
}NN 	
}OO 
}PP ˆ
wD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\DatasetService\IDatasetService.cs
	namespace 	
Services
 
. 
DatasetService !
{ 
public 

	interface 
IDatasetService $
{		 
Task

 
<

 
IEnumerable

 
<

 
Dataset

  
>

  !
>

! "
GetAllDatasetAsync

# 5
(

5 6
string

6 <
label

= B
,

B C
int

D G
limit

H M
=

N O
$num

P R
)

R S
;

S T
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! ""
GetAllTestDatasetAsync# 9
(9 :
string: @
labelA F
,F G
intH K
limitL Q
=R S
$numT V
)V W
;W X
Task 
< 
IEnumerable 
< 
Dataset  
>  !
>! "#
GetAllTrainDatasetAsync# :
(: ;
string; A
labelB G
,G H
intI L
limitM R
=S T
$numU W
)W X
;X Y
Task 
< 
Dataset 
> 
GetDatasetAsync %
(% &
Guid& *
id+ -
)- .
;. /
Task 
< 
bool 
> 
InsertIntoDataset $
($ %
Dataset% ,
dataset- 4
)4 5
;5 6
Task 
< 
bool 
> 
UpdateDataset  
(  !
Dataset! (
dataset) 0
)0 1
;1 2
Task 
< 
bool 
> "
DeleteFromDatasetAsync )
() *
Guid* .
id/ 1
)1 2
;2 3
} 
} ä	
sD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\IImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

	interface 
IImageService "
{ 
Task 
< 
byte 
[ 
] 
> 
Resize 
( 
byte  
[  !
]! "
source# )
,) *
int* -
width. 3
,3 4
int5 8
height9 ?
)? @
;@ A
Task		 
<		 
byte		 
[		 
]		 
>		 
Crop		 
(		 
byte		 
[		 
]		  
source		! '
)		' (
;		( )
Task

 
<

 
List

 
<

 
byte

 
[

 
]

 
>

 
>

 
Split

  
(

  !
byte

! %
[

% &
]

& '
source

( .
)

. /
;

/ 0
} 
} ¥∂
tD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageProcessor.cs
	namespace		 	
Services		
 
.		 
ImageService		 
{

 
class 	
ImageProcessor
 
{ 
private 
readonly 
Bitmap 
image  %
;% &
private 
string 
ImageMatrix "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
ImageProcessor 
( 
byte "
[" #
]# $
source% +
)+ ,
{ 	
MemoryStream 
ms 
= 
new !
MemoryStream" .
(. /
source/ 5
)5 6
;6 7
image 
= 
new 
Bitmap 
( 
ms !
)! "
;" #
} 	
private 
Task 
< 
int 
[ 
, 
] 
> $
GetPixelMatrixFromBitmap 5
(5 6
)6 7
{ 	
int 
[ 
, 
] 
result 
= 
new 
int  #
[# $
image$ )
.) *
Height* 0
,0 1
image2 7
.7 8
Width8 =
]= >
;> ?
StringBuilder 
lines 
=  !
new" %
StringBuilder& 3
(3 4
)4 5
;5 6
for 
( 
int 
i 
= 
$num 
; 
i 
< 
image  %
.% &
Height& ,
;, -
i. /
++/ 1
)1 2
{ 
lines 
. 
Append 
( 
$char  
)  !
;! "
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
image$ )
.) *
Width* /
;/ 0
j1 2
++2 4
)4 5
{ 
Color 
pixel 
=  !
image" '
.' (
GetPixel( 0
(0 1
j1 2
,2 3
i4 5
)5 6
;6 7
if   
(   
pixel   
.   
R   
==    "
$num  # $
||  % '
pixel  ( -
.  - .
G  . /
==  0 2
$num  3 4
||  5 7
pixel  8 =
.  = >
B  > ?
==  @ B
$num  C D
)  D E
{!! 
result"" 
["" 
i""  
,""  !
j""" #
]""# $
=""% &
pixel""' ,
."", -
A""- .
;"". /
lines## 
.## 
Append## $
(##$ %
pixel##% *
.##* +
A##+ ,
.##, -
ToString##- 5
(##5 6
)##6 7
+##8 9
$str##: =
)##= >
;##> ?
}$$ 
else%% 
{&& 
result'' 
['' 
i''  
,''  !
j''" #
]''# $
=''% &
$num''' (
;''( )
lines(( 
.(( 
Append(( $
((($ %
$str((% *
)((* +
;((+ ,
})) 
}++ 
lines,, 
.,, 
Append,, 
(,, 
$str,, #
),,# $
;,,$ %
}-- 
ImageMatrix.. 
=.. 
lines.. 
...  
ToString..  (
(..( )
)..) *
;..* +
File// 
.// 
WriteAllLines// 
(// 
$str// )
,//) *
ImageMatrix//+ 6
.//6 7
Split//7 <
(//< =
$str//= A
)//A B
)//B C
;//C D
return00 
Task00 
.00 

FromResult00 "
(00" #
result00# )
)00) *
;00* +
}11 	
private33 
Bitmap33 
FillToAspectRatio33 (
(33( )
int33) ,
width33- 2
,332 3
int334 7
height338 >
)33> ?
{44 	
double55 
ratioH55 
=55 
Math55  
.55  !
Max55! $
(55$ %
(55% &
double55& ,
)55, -
width55- 2
/553 4
image555 :
.55: ;
Width55; @
,55@ A
(55B C
double55C I
)55I J
image55J O
.55O P
Width55P U
/55V W
width55X ]
)55] ^
;55^ _
double66 
ratioW66 
=66 
Math66  
.66  !
Max66! $
(66$ %
(66% &
double66& ,
)66, -
height66- 3
/664 5
image666 ;
.66; <
Height66< B
,66B C
(66D E
double66E K
)66K L
image66L Q
.66Q R
Height66R X
/66Y Z
height66[ a
)66a b
;66b c
Size77 
newSize77 
=77 
new77 
Size77 #
(77# $
(77$ %
int77% (
)77( )
(77) *
width77* /
*770 1
ratioW772 8
)778 9
+77: ;
(77< =
image77= B
.77B C
Width77C H
/77I J
$num77K L
)77L M
,77M N
(77O P
int77P S
)77S T
(77T U
height77U [
*77\ ]
ratioH77^ d
)77d e
+77f g
(77h i
image77i n
.77n o
Height77o u
/77v w
$num77x y
)77y z
)77z {
;77{ |
Bitmap88 
newImage88 
=88 
new88 !
Bitmap88" (
(88( )
newSize88) 0
.880 1
Width881 6
,886 7
newSize888 ?
.88? @
Height88@ F
)88F G
;88G H
using99 
(99 
Graphics99 
g99 
=99 
Graphics99  (
.99( )
	FromImage99) 2
(992 3
newImage993 ;
)99; <
)99< =
{:: 
g;; 
.;; 
FillRectangle;; 
(;;  
Brushes;;  '
.;;' (
White;;( -
,;;- .
$num;;/ 0
,;;0 1
$num;;2 3
,;;3 4
newSize;;5 <
.;;< =
Width;;= B
,;;B C
newSize;;D K
.;;K L
Height;;L R
);;R S
;;;S T
g<< 
.<< 
SmoothingMode<< 
=<<  !
System<<" (
.<<( )
Drawing<<) 0
.<<0 1
	Drawing2D<<1 :
.<<: ;
SmoothingMode<<; H
.<<H I
HighQuality<<I T
;<<T U
g== 
.== 
	DrawImage== 
(== 
image== !
,==! "
(==# $
newSize==$ +
.==+ ,
Width==, 1
/==2 3
$num==4 5
)==5 6
-==7 8
(==9 :
image==: ?
.==? @
Width==@ E
/==F G
$num==H I
)==I J
,==J K
(==L M
newSize==M T
.==T U
Height==U [
/==\ ]
$num==^ _
)==_ `
-==a b
(==c d
image==d i
.==i j
Height==j p
/==q r
$num==s t
)==t u
,==u v
image==w |
.==| }
Width	==} Ç
,
==Ç É
image
==Ñ â
.
==â ä
Height
==ä ê
)
==ê ë
;
==ë í
}>> 
return?? 
newImage?? 
;?? 
}@@ 	
publicBB 
asyncBB 
TaskBB 
<BB 
byteBB 
[BB 
]BB  
>BB  !
ResizeBB" (
(BB( )
intBB) ,
widthBB- 2
,BB2 3
intBB4 7
heightBB8 >
)BB> ?
{CC 	
BitmapDD 
newImageDD 
=DD 
awaitDD #
TaskDD$ (
.DD( )
RunDD) ,
(DD, -
(DD- .
)DD. /
=>DD0 2
FillToAspectRatioDD3 D
(DDD E
widthDDE J
,DDJ K
heightDDL R
)DDR S
)DDS T
;DDT U
BitmapEE 
resultEE 
=EE 
newEE 
BitmapEE  &
(EE& '
widthEE' ,
,EE, -
heightEE. 4
)EE4 5
;EE5 6
usingFF 
(FF 
GraphicsFF 
gFF 
=FF 
GraphicsFF  (
.FF( )
	FromImageFF) 2
(FF2 3
resultFF3 9
)FF9 :
)FF: ;
{GG 
gHH 
.HH 
SmoothingModeHH 
=HH  !
SystemHH" (
.HH( )
DrawingHH) 0
.HH0 1
	Drawing2DHH1 :
.HH: ;
SmoothingModeHH; H
.HHH I
HighQualityHHI T
;HHT U
gII 
.II 
	DrawImageII 
(II 
newImageII $
,II$ %
$numII& '
,II' (
$numII) *
,II* +
widthII, 1
,II1 2
heightII3 9
)II9 :
;II: ;
}JJ 
varLL 
streamLL 
=LL 
newLL 
MemoryStreamLL )
(LL) *
)LL* +
;LL+ ,
resultMM 
.MM 
SaveMM 
(MM 
streamMM 
,MM 
ImageFormatMM  +
.MM+ ,
PngMM, /
)MM/ 0
;MM0 1
newImageOO 
.OO 
DisposeOO 
(OO 
)OO 
;OO 
resultPP 
.PP 
DisposePP 
(PP 
)PP 
;PP 
returnSS 
streamSS 
.SS 
ToArraySS !
(SS! "
)SS" #
;SS# $
}TT 	
publicWW 
asyncWW 
TaskWW 
<WW 
byteWW 
[WW 
]WW  
>WW  !
CropWW" &
(WW& '
)WW' (
{XX 	
intYY 
[YY 
,YY 
]YY 
imageMatrixYY 
=YY  
awaitYY! &
TaskYY' +
.YY+ ,
RunYY, /
(YY/ 0$
GetPixelMatrixFromBitmapYY0 H
)YYH I
;YYI J
int[[ 
minW[[ 
=[[ 
image[[ 
.[[ 
Width[[ "
;[[" #
int\\ 
maxW\\ 
=\\ 
$num\\ 
;\\ 
int^^ 
minH^^ 
=^^ 
image^^ 
.^^ 
Height^^ #
;^^# $
int__ 
maxH__ 
=__ 
$num__ 
;__ 
foraa 
(aa 
intaa 
iaa 
=aa 
$numaa 
;aa 
iaa 
<aa 
imageaa  %
.aa% &
Heightaa& ,
;aa, -
iaa. /
++aa/ 1
)aa1 2
{bb 
forcc 
(cc 
intcc 
jcc 
=cc 
$numcc 
;cc 
jcc  !
<cc" #
imagecc$ )
.cc) *
Widthcc* /
;cc/ 0
jcc1 2
++cc2 4
)cc4 5
{dd 
ifee 
(ee 
imageMatrixee #
[ee# $
iee$ %
,ee% &
jee' (
]ee( )
==ee* ,
$numee- 0
&&ee1 3
jee4 5
>ee6 7
maxWee8 <
)ee< =
maxWff 
=ff 
jff  
;ff  !
ifgg 
(gg 
imageMatrixgg #
[gg# $
igg$ %
,gg% &
jgg' (
]gg( )
==gg* ,
$numgg- 0
&&gg1 3
jgg4 5
<gg6 7
minWgg8 <
)gg< =
minWhh 
=hh 
jhh  
;hh  !
ifii 
(ii 
imageMatrixii #
[ii# $
iii$ %
,ii% &
jii' (
]ii( )
==ii* ,
$numii- 0
&&ii1 3
iii4 5
>ii6 7
maxHii8 <
)ii< =
maxHjj 
=jj 
ijj  
;jj  !
ifkk 
(kk 
imageMatrixkk #
[kk# $
ikk$ %
,kk% &
jkk' (
]kk( )
==kk* ,
$numkk- 0
&&kk1 3
ikk4 5
<kk6 7
minHkk8 <
)kk< =
minHll 
=ll 
ill  
;ll  !
}mm 
}nn 
intpp 
widthBlackSpacespp  
=pp! "
maxWpp# '
-pp( )
minWpp* .
+pp/ 0
$numpp1 2
;pp2 3
intqq 
heightBlackSpacesqq !
=qq" #
maxHqq$ (
-qq) *
minHqq+ /
+qq0 1
$numqq2 3
;qq3 4
Bitmapuu 
resultuu 
=uu 
newuu 
Bitmapuu  &
(uu& '
widthBlackSpacesuu' 7
,uu7 8
heightBlackSpacesuu9 J
)uuJ K
;uuK L
intww 
[ww 
,ww 
]ww 
resultMatrixww 
=ww  !
newww" %
intww& )
[ww) *
heightBlackSpacesww* ;
,ww; <
widthBlackSpacesww= M
]wwM N
;wwN O
foryy 
(yy 
intyy 
iyy 
=yy 
$numyy 
;yy 
iyy 
<yy 
heightBlackSpacesyy  1
;yy1 2
iyy3 4
++yy4 6
)yy6 7
{zz 
for{{ 
({{ 
int{{ 
j{{ 
={{ 
$num{{ 
;{{ 
j{{  !
<{{" #
widthBlackSpaces{{$ 4
;{{4 5
j{{6 7
++{{7 9
){{9 :
{|| 
resultMatrix}}  
[}}  !
i}}! "
,}}" #
j}}$ %
]}}% &
=}}' (
imageMatrix}}) 4
[}}4 5
minH}}5 9
+}}: ;
i}}< =
,}}= >
minW}}? C
+}}D E
j}}F G
]}}G H
;}}H I
if~~ 
(~~ 
resultMatrix~~ $
[~~$ %
i~~% &
,~~& '
j~~( )
]~~) *
==~~+ -
$num~~. /
)~~/ 0
{ 
result
ÄÄ 
.
ÄÄ 
SetPixel
ÄÄ '
(
ÄÄ' (
j
ÄÄ( )
,
ÄÄ) *
i
ÄÄ+ ,
,
ÄÄ, -
Color
ÄÄ. 3
.
ÄÄ3 4
FromArgb
ÄÄ4 <
(
ÄÄ< =
$num
ÄÄ= @
,
ÄÄ@ A
$num
ÄÄB E
,
ÄÄE F
$num
ÄÄG J
)
ÄÄJ K
)
ÄÄK L
;
ÄÄL M
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
result
ÑÑ 
.
ÑÑ 
SetPixel
ÑÑ '
(
ÑÑ' (
j
ÑÑ( )
,
ÑÑ) *
i
ÑÑ+ ,
,
ÑÑ, -
Color
ÑÑ. 3
.
ÑÑ3 4
FromArgb
ÑÑ4 <
(
ÑÑ< =
resultMatrix
ÑÑ= I
[
ÑÑI J
i
ÑÑJ K
,
ÑÑK L
j
ÑÑM N
]
ÑÑN O
,
ÑÑO P
$num
ÑÑQ R
,
ÑÑR S
$num
ÑÑT U
,
ÑÑU V
$num
ÑÑW X
)
ÑÑX Y
)
ÑÑY Z
;
ÑÑZ [
}
ÖÖ 
}
ÜÜ 
}
áá 
var
ãã 
stream
ãã 
=
ãã 
new
ãã 
MemoryStream
ãã )
(
ãã) *
)
ãã* +
;
ãã+ ,
result
åå 
.
åå 
Save
åå 
(
åå 
stream
åå 
,
åå 
ImageFormat
åå  +
.
åå+ ,
Png
åå, /
)
åå/ 0
;
åå0 1
result
éé 
.
éé 
Dispose
éé 
(
éé 
)
éé 
;
éé 
return
èè 
stream
èè 
.
èè 
ToArray
èè !
(
èè! "
)
èè" #
;
èè# $
}
êê 	
private
íí 
Bitmap
íí 
BitmapCreator
íí $
(
íí$ %
int
íí% (

splitIndex
íí) 3
,
íí3 4
int
íí5 8
	lastSplit
íí9 B
,
ííB C
int
ííD G
[
ííG H
,
ííH I
]
ííI J
imageMatrix
ííK V
)
ííV W
{
ìì 	
Bitmap
îî 
temp
îî 
=
îî 
new
îî 
Bitmap
îî $
(
îî$ %

splitIndex
îî% /
-
îî0 1
	lastSplit
îî2 ;
,
îî; <
image
îî= B
.
îîB C
Height
îîC I
)
îîI J
;
îîJ K
for
ïï 
(
ïï 
int
ïï 
j
ïï 
=
ïï 
$num
ïï 
;
ïï 
j
ïï 
<
ïï 
image
ïï  %
.
ïï% &
Height
ïï& ,
;
ïï, -
j
ïï. /
++
ïï/ 1
)
ïï1 2
for
ññ 
(
ññ 
int
ññ 
i
ññ 
=
ññ 
	lastSplit
ññ &
;
ññ& '
i
ññ( )
<
ññ* +

splitIndex
ññ, 6
;
ññ6 7
i
ññ8 9
++
ññ9 ;
)
ññ; <
{
óó 
if
òò 
(
òò 
imageMatrix
òò #
[
òò# $
j
òò$ %
,
òò% &
i
òò' (
]
òò( )
==
òò* ,
$num
òò- .
)
òò. /
{
ôô 
temp
öö 
.
öö 
SetPixel
öö %
(
öö% &
i
öö& '
-
öö( )
	lastSplit
öö* 3
,
öö3 4
j
öö5 6
,
öö6 7
Color
öö8 =
.
öö= >
FromArgb
öö> F
(
ööF G
$num
ööG J
,
ööJ K
$num
ööL O
,
ööO P
$num
ööQ T
)
ööT U
)
ööU V
;
ööV W
}
õõ 
else
úú 
{
ùù 
temp
ûû 
.
ûû 
SetPixel
ûû %
(
ûû% &
i
ûû& '
-
ûû( )
	lastSplit
ûû* 3
,
ûû3 4
j
ûû5 6
,
ûû6 7
Color
ûû8 =
.
ûû= >
FromArgb
ûû> F
(
ûûF G
imageMatrix
ûûG R
[
ûûR S
j
ûûS T
,
ûûT U
i
ûûV W
]
ûûW X
,
ûûX Y
$num
ûûZ [
,
ûû[ \
$num
ûû] ^
,
ûû^ _
$num
ûû` a
)
ûûa b
)
ûûb c
;
ûûc d
}
üü 
}
†† 
return
°° 
temp
°° 
;
°° 
}
¢¢ 	
public
§§ 
async
§§ 
Task
§§ 
<
§§ 
List
§§ 
<
§§ 
byte
§§ #
[
§§# $
]
§§$ %
>
§§% &
>
§§& '
Split
§§( -
(
§§- .
)
§§. /
{
•• 	
List
¶¶ 
<
¶¶ 
byte
¶¶ 
[
¶¶ 
]
¶¶ 
>
¶¶ 
result
¶¶ 
=
¶¶  !
new
¶¶" %
List
¶¶& *
<
¶¶* +
byte
¶¶+ /
[
¶¶/ 0
]
¶¶0 1
>
¶¶1 2
(
¶¶2 3
)
¶¶3 4
;
¶¶4 5
int
ßß 
[
ßß 
,
ßß 
]
ßß 
imageMatrix
ßß 
=
ßß  
await
ßß! &
Task
ßß' +
.
ßß+ ,
Run
ßß, /
(
ßß/ 0&
GetPixelMatrixFromBitmap
ßß0 H
)
ßßH I
;
ßßI J
int
®® 
lastNotBank
®® 
=
®® 
-
®® 
$num
®®  
;
®®  !
List
©© 
<
©© 
int
©© 
>
©© 
	splitList
©© 
=
©©  !
new
©©" %
List
©©& *
<
©©* +
int
©©+ .
>
©©. /
(
©©/ 0
)
©©0 1
;
©©1 2
for
´´ 
(
´´ 
int
´´ 
j
´´ 
=
´´ 
$num
´´ 
;
´´ 
j
´´ 
<
´´ 
image
´´  %
.
´´% &
Width
´´& +
;
´´+ ,
j
´´- .
++
´´. 0
)
´´0 1
{
¨¨ 
bool
≠≠ 
isLineWhite
≠≠  
=
≠≠! "
true
≠≠# '
;
≠≠' (
for
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
i
ÆÆ  !
<
ÆÆ" #
image
ÆÆ$ )
.
ÆÆ) *
Height
ÆÆ* 0
;
ÆÆ0 1
i
ÆÆ2 3
++
ÆÆ3 5
)
ÆÆ5 6
if
ØØ 
(
ØØ 
imageMatrix
ØØ #
[
ØØ# $
i
ØØ$ %
,
ØØ% &
j
ØØ' (
]
ØØ( )
==
ØØ* ,
$num
ØØ- 0
)
ØØ0 1
{
∞∞ 
isLineWhite
±± #
=
±±$ %
false
±±& +
;
±±+ ,
lastNotBank
≤≤ #
=
≤≤$ %
$num
≤≤& '
;
≤≤' (
}
≥≥ 
if
¥¥ 
(
¥¥ 
isLineWhite
¥¥ 
&&
¥¥  "
lastNotBank
¥¥# .
!=
¥¥/ 1
-
¥¥2 3
$num
¥¥3 4
)
¥¥4 5
{
µµ 
	splitList
∂∂ 
.
∂∂ 
Add
∂∂ !
(
∂∂! "
j
∂∂" #
)
∂∂# $
;
∂∂$ %
lastNotBank
∑∑ 
=
∑∑  !
-
∑∑" #
$num
∑∑# $
;
∑∑$ %
}
∏∏ 
}
ππ 
int
ªª 
	lastSplit
ªª 
=
ªª 
$num
ªª 
;
ªª 
foreach
ææ 
(
ææ 
int
ææ 

splitIndex
ææ #
in
ææ$ &
	splitList
ææ' 0
)
ææ0 1
{
øø 
Bitmap
¿¿ 
temp
¿¿ 
=
¿¿ 
BitmapCreator
¿¿ +
(
¿¿+ ,

splitIndex
¿¿, 6
,
¿¿6 7
	lastSplit
¿¿8 A
,
¿¿A B
imageMatrix
¿¿C N
)
¿¿N O
;
¿¿O P
	lastSplit
¡¡ 
=
¡¡ 

splitIndex
¡¡ &
;
¡¡& '
var
√√ 
stream
√√ 
=
√√ 
new
√√  
MemoryStream
√√! -
(
√√- .
)
√√. /
;
√√/ 0
temp
ƒƒ 
.
ƒƒ 
Save
ƒƒ 
(
ƒƒ 
stream
ƒƒ  
,
ƒƒ  !
ImageFormat
ƒƒ" -
.
ƒƒ- .
Png
ƒƒ. 1
)
ƒƒ1 2
;
ƒƒ2 3
temp
≈≈ 
.
≈≈ 
Dispose
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
result
∆∆ 
.
∆∆ 
Add
∆∆ 
(
∆∆ 
stream
∆∆ !
.
∆∆! "
ToArray
∆∆" )
(
∆∆) *
)
∆∆* +
)
∆∆+ ,
;
∆∆, -
}
»» 
return
   
result
   
;
   
}
ÀÀ 	
public
ŒŒ 
override
ŒŒ 
string
ŒŒ 
ToString
ŒŒ '
(
ŒŒ' (
)
ŒŒ( )
{
œœ 	
return
–– 
ImageMatrix
–– 
;
–– 
}
—— 	
}
““ 
}”” Ö
rD:\Github\number-recognition-net\number-recognition-api\NumberRecognitionAPI\Services\ImageService\ImageService.cs
	namespace 	
Services
 
. 
ImageService 
{ 
public 

class 
ImageService 
: 
IImageService  -
{ 
public		 
async		 
Task		 
<		 
byte		 
[		 
]		  
>		  !
Resize		" (
(		( )
byte		) -
[		- .
]		. /
source		0 6
,		6 7
int		7 :
width		; @
,		@ A
int		B E
height		F L
)		L M
{

 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Resize4 :
(: ;
width; @
,@ A
heightA G
)G H
;H I
} 	
public 
async 
Task 
< 
byte 
[ 
]  
>  !
Crop" &
(& '
byte' +
[+ ,
], -
source. 4
)4 5
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Crop4 8
(8 9
)9 :
;: ;
} 	
public 
async 
Task 
< 
List 
< 
byte #
[# $
]$ %
>% &
>& '
Split( -
(- .
byte. 2
[2 3
]3 4
source5 ;
); <
{ 	
return 
await 
new 
ImageProcessor +
(+ ,
source, 2
)2 3
.3 4
Split4 9
(9 :
): ;
;; <
} 	
} 
} 